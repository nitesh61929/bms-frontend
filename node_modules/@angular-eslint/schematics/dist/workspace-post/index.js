"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const utils_1 = require("../utils");
function default_1(options) {
    return (host, context) => {
        return schematics_1.chain([
            // Remove TSLint related dependencies
            utils_1.updateJsonInTree(core_1.join(core_1.normalize(options.name || '/'), 'package.json'), (json) => {
                for (const devDep of Object.keys(json.devDependencies)) {
                    if (devDep === 'codelyzer' || devDep === 'tslint') {
                        delete json.devDependencies[devDep];
                    }
                }
                json.devDependencies = utils_1.sortObjectByKeys(json.devDependencies);
                return json;
            }),
            // Create the root ESLint config file for the workspace
            utils_1.createRootESLintConfigFile(options.name),
            // Delete the root tslint.json and schedule an install so that the TSLint dependencies are fully removed
            (tree) => {
                tree.delete(core_1.join(core_1.normalize(options.name || '/'), 'tslint.json'));
                context.addTask(new tasks_1.NodePackageInstallTask());
            },
            /**
             * Update the default schematics collection to @angular-eslint so that future projects within
             * the same workspace will also use ESLint
             */
            utils_1.updateJsonInTree(core_1.join(core_1.normalize(options.name || '/'), 'angular.json'), (json) => {
                json.cli = json.cli || {};
                json.cli.defaultCollection = '@angular-eslint/schematics';
                return json;
            }),
        ])(host, context);
    };
}
exports.default = default_1;
