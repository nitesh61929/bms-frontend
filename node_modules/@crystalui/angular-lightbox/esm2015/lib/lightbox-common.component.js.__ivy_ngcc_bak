import { __decorate } from "tslib";
import { Component, Input, HostBinding, ViewChild } from '@angular/core';
import { EventService } from './event.service';
import { Utils } from './utils';
let LightboxCommonComponent = class LightboxCommonComponent {
    constructor(eventService) {
        this.eventService = eventService;
        this.currentImageIndex = 0;
        this.indexCurrentSlide = 1;
        this.containerStyles = {
            transition: '',
            transform: '',
            width: '',
            height: '',
            opacity: ''
        };
        this.currImageLoadingState = 'not-loaded';
        this.isMobile = Utils.mobileCheck();
    }
    get lightboxImage() {
        return this._lightboxImage;
    }
    get lightboxImageElement() {
        if (this.lightboxImage) {
            return this.lightboxImage.nativeElement;
        }
    }
    get lightboxImageNaturalHeight() {
        if (this.lightboxImageElement) {
            return this.lightboxImageElement.naturalHeight;
        }
    }
    get lightboxImageNaturalWidth() {
        if (this.lightboxImageElement) {
            return this.lightboxImageElement.naturalWidth;
        }
    }
    get index() {
        return this.currentImageIndex;
    }
    get properties() {
        return this.lightboxData.properties;
    }
    get images() {
        return this.lightboxData.images || [this.lightboxData.image];
    }
    get thumbnailImage() {
        return this.images[this.currentImageIndex].nativeElement;
    }
    get thumbnailImagePosition() {
        return this.thumbnailImage.getBoundingClientRect();
    }
    // Image size if it is larger than the window size
    get virtualImageDimension() {
        let height = this.lightboxImageNaturalHeight;
        let width = height * this.imageAspectRatio;
        const windowWidth = document.body.clientWidth;
        const windowHeight = window.innerHeight;
        if (this.isImageLargerWindow) {
            if (height > windowHeight) {
                height = windowHeight;
                width = height * this.imageAspectRatio;
            }
            if (width > windowWidth) {
                width = windowWidth;
                height = width / this.imageAspectRatio;
            }
        }
        else {
            width = this.lightboxImageNaturalWidth;
            height = this.lightboxImageNaturalHeight;
        }
        if (width === 0 || Number.parseInt(height) === 0) {
            return { width: 200, height: 200 };
        }
        return { width, height };
    }
    get containerInitialPosition() {
        const scale = (this.showState === 'initial-thumbnail-image') ? 1 : this.containerScale;
        const top = this.thumbnailImagePosition.top;
        const left = this.thumbnailImagePosition.left;
        return 'matrix(' + scale + ', 0, 0, ' + scale + ',' + left + ',' + top + ')';
    }
    get containerFullscreenPosition() {
        const left = (document.body.clientWidth - this.virtualImageDimension.width) / 2;
        const top = (window.innerHeight - this.virtualImageDimension.height) / 2;
        return 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    }
    get containerScale() {
        return this.thumbnailImagePosition.width / this.virtualImageDimension.width;
    }
    get imageAspectRatio() {
        return this.thumbnailImage.naturalWidth / this.thumbnailImage.naturalHeight;
    }
    get isImageLargerWindow() {
        const imageNaturalWidth = this.lightboxImageNaturalWidth;
        const imageNaturalHeight = this.lightboxImageNaturalHeight;
        const windowWidth = document.body.clientWidth;
        const windowHeight = window.innerHeight;
        return imageNaturalWidth > windowWidth || imageNaturalHeight > windowHeight;
    }
    get isFirstImage() {
        if (this.properties.loop) {
            return false;
        }
        else {
            return this.index === 0;
        }
    }
    get isLastImage() {
        if (this.properties.loop) {
            return false;
        }
        else {
            return this.index === this.latestImageIndex;
        }
    }
    get latestImageIndex() {
        return this.images.length - 1;
    }
    get backgroundColor() {
        const opacity = this.properties.backgroundOpacity;
        const color = this.properties.backgroundColor;
        if (color === 'black') {
            return 'rgba(0, 0, 0, ' + opacity + ')';
        }
        else {
            return 'rgba(255, 255, 255, ' + opacity + ')';
        }
    }
    get animationDuration() {
        const animationDuration = this.properties.animationDuration;
        if (typeof animationDuration === "string") {
            return Number.parseInt(animationDuration);
        }
        else {
            return animationDuration;
        }
    }
    get animationMode() {
        if (this.currImageLoadingState === 'error') {
            return 'default';
        }
        return this.properties.animationMode;
    }
    get animationTimingFunction() {
        return this.properties.animationTimingFunction;
    }
    get closeButtonText() {
        return this.properties.closeButtonText;
    }
    get counterSeparator() {
        return this.properties.counterSeparator;
    }
    get counter() {
        return this.currentImageIndex + 1 + this.counterSeparator + this.images.length;
    }
    emitState(type, state) {
        if (state === 'initial-virtual-image' ||
            state === 'initial-styles') {
            return;
        }
        if (state === 'initial-default' ||
            state === 'initial-thumbnail-image') {
            state = 'initial';
        }
        this.eventService.emitChangeEvent({
            type: type + ':' + state
        });
    }
    setShowState(state) {
        this.showState = state;
        this.emitState('show-state', state);
    }
    setClosingState(state) {
        this.closingState = state;
        this.emitState('closing-state', state);
    }
    setAnimationDuration() {
        this.hostStyleTransition = 'background-color ' + this.animationDuration + 'ms';
        this.containerStyles.transition = 'all ' + this.animationDuration + 'ms ' + this.animationTimingFunction;
    }
    setBackgroundColor() {
        this.hostStyleBackgroundColor = this.backgroundColor;
    }
    getContainerHeight() {
        return this.thumbnailImagePosition.height / this.containerScale + 'px';
    }
    showThumbnailImage() {
        this.thumbnailImage.style.opacity = '';
    }
    hideThumbnailImage() {
        this.thumbnailImage.style.opacity = 0;
    }
    updateThumbnailPosition() {
        this.containerStyles.transform = this.containerInitialPosition;
    }
};
LightboxCommonComponent.ctorParameters = () => [
    { type: EventService }
];
__decorate([
    Input()
], LightboxCommonComponent.prototype, "lightboxData", void 0);
__decorate([
    HostBinding('style.backgroundColor')
], LightboxCommonComponent.prototype, "hostStyleBackgroundColor", void 0);
__decorate([
    HostBinding('style.transition')
], LightboxCommonComponent.prototype, "hostStyleTransition", void 0);
__decorate([
    ViewChild('imageFirst', { static: true })
], LightboxCommonComponent.prototype, "_imageFirst", void 0);
__decorate([
    ViewChild('imageSecond', { static: true })
], LightboxCommonComponent.prototype, "_imageSecond", void 0);
__decorate([
    ViewChild('imageLast', { static: true })
], LightboxCommonComponent.prototype, "_imageLast", void 0);
__decorate([
    ViewChild('lightboxImage', { static: true })
], LightboxCommonComponent.prototype, "_lightboxImage", void 0);
LightboxCommonComponent = __decorate([
    Component({
        selector: 'lightbox-common',
        template: ''
    })
], LightboxCommonComponent);
export { LightboxCommonComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3gtY29tbW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjcnlzdGFsdWkvYW5ndWxhci1saWdodGJveC8iLCJzb3VyY2VzIjpbImxpYi9saWdodGJveC1jb21tb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBR3JGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBT2hDLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBOExoQyxZQUFtQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQTVMN0Msc0JBQWlCLEdBQVcsQ0FBQyxDQUFDO1FBQzlCLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUd0QixvQkFBZSxHQUFRO1lBQ25CLFVBQVUsRUFBRSxFQUFFO1lBQ2QsU0FBUyxFQUFFLEVBQUU7WUFDYixLQUFLLEVBQUUsRUFBRTtZQUNULE1BQU0sRUFBRSxFQUFFO1lBQ1YsT0FBTyxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBQ0YsMEJBQXFCLEdBQW9ELFlBQVksQ0FBQztRQWtMbEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQXRLRCxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksb0JBQW9CO1FBQ3BCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBQztZQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1NBQzNDO0lBQ0wsQ0FBQztJQUVELElBQUksMEJBQTBCO1FBQzFCLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFDO1lBQzFC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cG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpZ2h0Ym94RGF0YSwgUHJvcGVydGllcyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBTaG93U3RhdGUsIENsb3NpbmdTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi9ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbGlnaHRib3gtY29tbW9uJyxcbiAgICB0ZW1wbGF0ZTogJydcbn0pXG5cbmV4cG9ydCBjbGFzcyBMaWdodGJveENvbW1vbkNvbXBvbmVudCB7XG5cbiAgICBjdXJyZW50SW1hZ2VJbmRleDogbnVtYmVyID0gMDtcbiAgICBpbmRleEN1cnJlbnRTbGlkZSA9IDE7XG4gICAgc2hvd1N0YXRlOiBTaG93U3RhdGU7XG4gICAgY2xvc2luZ1N0YXRlOiBDbG9zaW5nU3RhdGU7XG4gICAgY29udGFpbmVyU3R5bGVzOiBhbnkgPSB7XG4gICAgICAgIHRyYW5zaXRpb246ICcnLFxuICAgICAgICB0cmFuc2Zvcm06ICcnLFxuICAgICAgICB3aWR0aDogJycsXG4gICAgICAgIGhlaWdodDogJycsXG4gICAgICAgIG9wYWNpdHk6ICcnXG4gICAgfTtcbiAgICBjdXJySW1hZ2VMb2FkaW5nU3RhdGU6ICdub3QtbG9hZGVkJyB8ICdsb2FkaW5nJyB8ICd1cGxvYWRlZCcgfCAnZXJyb3InID0gJ25vdC1sb2FkZWQnO1xuICAgIGlzTW9iaWxlOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgbGlnaHRib3hEYXRhOiBMaWdodGJveERhdGE7XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmJhY2tncm91bmRDb2xvcicpIGhvc3RTdHlsZUJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUudHJhbnNpdGlvbicpIGhvc3RTdHlsZVRyYW5zaXRpb246IHN0cmluZztcblxuICAgIEBWaWV3Q2hpbGQoJ2ltYWdlRmlyc3QnLCB7IHN0YXRpYzogdHJ1ZSB9KSBfaW1hZ2VGaXJzdDogRWxlbWVudFJlZjtcbiAgICBAVmlld0NoaWxkKCdpbWFnZVNlY29uZCcsIHsgc3RhdGljOiB0cnVlIH0pIF9pbWFnZVNlY29uZDogRWxlbWVudFJlZjtcbiAgICBAVmlld0NoaWxkKCdpbWFnZUxhc3QnLCB7IHN0YXRpYzogdHJ1ZSB9KSBfaW1hZ2VMYXN0OiBFbGVtZW50UmVmO1xuICAgIEBWaWV3Q2hpbGQoJ2xpZ2h0Ym94SW1hZ2UnLCB7IHN0YXRpYzogdHJ1ZSB9KSBfbGlnaHRib3hJbWFnZTogRWxlbWVudFJlZjtcblxuICAgIGdldCBsaWdodGJveEltYWdlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9saWdodGJveEltYWdlO1xuICAgIH1cblxuICAgIGdldCBsaWdodGJveEltYWdlRWxlbWVudCgpe1xuICAgICAgICBpZiAodGhpcy5saWdodGJveEltYWdlKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpZ2h0Ym94SW1hZ2UubmF0aXZlRWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBsaWdodGJveEltYWdlTmF0dXJhbEhlaWdodCgpe1xuICAgICAgICBpZiAodGhpcy5saWdodGJveEltYWdlRWxlbWVudCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saWdodGJveEltYWdlRWxlbWVudC5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGxpZ2h0Ym94SW1hZ2VOYXR1cmFsV2lkdGgoKXtcbiAgICAgICAgaWYgKHRoaXMubGlnaHRib3hJbWFnZUVsZW1lbnQpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlnaHRib3hJbWFnZUVsZW1lbnQubmF0dXJhbFdpZHRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGluZGV4KCl7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRJbWFnZUluZGV4O1xuICAgIH1cblxuICAgIGdldCBwcm9wZXJ0aWVzKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmxpZ2h0Ym94RGF0YS5wcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIGdldCBpbWFnZXMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlnaHRib3hEYXRhLmltYWdlcyB8fCBbdGhpcy5saWdodGJveERhdGEuaW1hZ2VdO1xuICAgIH1cblxuICAgIGdldCB0aHVtYm5haWxJbWFnZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZXNbdGhpcy5jdXJyZW50SW1hZ2VJbmRleF0ubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXQgdGh1bWJuYWlsSW1hZ2VQb3NpdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYm5haWxJbWFnZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICAvLyBJbWFnZSBzaXplIGlmIGl0IGlzIGxhcmdlciB0aGFuIHRoZSB3aW5kb3cgc2l6ZVxuICAgIGdldCB2aXJ0dWFsSW1hZ2VEaW1lbnNpb24oKXtcbiAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMubGlnaHRib3hJbWFnZU5hdHVyYWxIZWlnaHQ7XG4gICAgICAgIGxldCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuaW1hZ2VBc3BlY3RSYXRpbztcbiAgICAgICAgY29uc3Qgd2luZG93V2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJbWFnZUxhcmdlcldpbmRvdyl7XG4gICAgICAgICAgICBpZiAoaGVpZ2h0ID4gd2luZG93SGVpZ2h0KXtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB3aW5kb3dIZWlnaHQ7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgKiB0aGlzLmltYWdlQXNwZWN0UmF0aW87XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICBpZiAod2lkdGggPiB3aW5kb3dXaWR0aCl7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIHRoaXMuaW1hZ2VBc3BlY3RSYXRpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5saWdodGJveEltYWdlTmF0dXJhbFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5saWdodGJveEltYWdlTmF0dXJhbEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gMCB8fCBOdW1iZXIucGFyc2VJbnQoaGVpZ2h0KSA9PT0gMCl7XG4gICAgICAgICAgICByZXR1cm4ge3dpZHRoOiAyMDAsIGhlaWdodDogMjAwfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRhaW5lckluaXRpYWxQb3NpdGlvbigpe1xuICAgICAgICBjb25zdCBzY2FsZSA9ICAodGhpcy5zaG93U3RhdGUgPT09ICdpbml0aWFsLXRodW1ibmFpbC1pbWFnZScpID8gMSA6IHRoaXMuY29udGFpbmVyU2NhbGU7IFxuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnRodW1ibmFpbEltYWdlUG9zaXRpb24udG9wO1xuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy50aHVtYm5haWxJbWFnZVBvc2l0aW9uLmxlZnQ7XG4gICAgICAgIHJldHVybiAnbWF0cml4KCcrIHNjYWxlICsnLCAwLCAwLCAnKyBzY2FsZSArJywnKyBsZWZ0ICsnLCcrIHRvcCArJyknO1xuICAgIH1cblxuICAgIGdldCBjb250YWluZXJGdWxsc2NyZWVuUG9zaXRpb24oKXtcbiAgICAgICAgY29uc3QgbGVmdCA9IChkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gdGhpcy52aXJ0dWFsSW1hZ2VEaW1lbnNpb24ud2lkdGgpIC8gMjtcbiAgICAgICAgY29uc3QgdG9wID0gKHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMudmlydHVhbEltYWdlRGltZW5zaW9uLmhlaWdodCkgLyAyO1xuXG4gICAgICAgIHJldHVybiAndHJhbnNsYXRlM2QoJysgbGVmdCArJ3B4LCAnKyB0b3AgKydweCwgMCknO1xuICAgIH1cblxuICAgIGdldCBjb250YWluZXJTY2FsZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYm5haWxJbWFnZVBvc2l0aW9uLndpZHRoIC8gdGhpcy52aXJ0dWFsSW1hZ2VEaW1lbnNpb24ud2lkdGg7XG4gICAgfVxuXG4gICAgZ2V0IGltYWdlQXNwZWN0UmF0aW8oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMudGh1bWJuYWlsSW1hZ2UubmF0dXJhbFdpZHRoIC8gdGhpcy50aHVtYm5haWxJbWFnZS5uYXR1cmFsSGVpZ2h0O1xuICAgIH1cblxuICAgIGdldCBpc0ltYWdlTGFyZ2VyV2luZG93KCk6Ym9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGltYWdlTmF0dXJhbFdpZHRoID0gdGhpcy5saWdodGJveEltYWdlTmF0dXJhbFdpZHRoO1xuICAgICAgICBjb25zdCBpbWFnZU5hdHVyYWxIZWlnaHQgPSB0aGlzLmxpZ2h0Ym94SW1hZ2VOYXR1cmFsSGVpZ2h0O1xuICAgICAgICBjb25zdCB3aW5kb3dXaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gICAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgcmV0dXJuIGltYWdlTmF0dXJhbFdpZHRoID4gd2luZG93V2lkdGggfHwgaW1hZ2VOYXR1cmFsSGVpZ2h0ID4gd2luZG93SGVpZ2h0O1xuICAgIH1cblxuICAgIGdldCBpc0ZpcnN0SW1hZ2UoKXtcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5sb29wKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4ID09PSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGlzTGFzdEltYWdlKCl7XG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMubG9vcCl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleCA9PT0gdGhpcy5sYXRlc3RJbWFnZUluZGV4O1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbiAgICBnZXQgbGF0ZXN0SW1hZ2VJbmRleCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBnZXQgYmFja2dyb3VuZENvbG9yKCl7XG4gICAgICAgIGNvbnN0IG9wYWNpdHkgPSB0aGlzLnByb3BlcnRpZXMuYmFja2dyb3VuZE9wYWNpdHk7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5wcm9wZXJ0aWVzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgaWYgKGNvbG9yID09PSAnYmxhY2snKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoMCwgMCwgMCwgJyArIG9wYWNpdHkgKycpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgyNTUsIDI1NSwgMjU1LCAnICsgb3BhY2l0eSArJyknO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGFuaW1hdGlvbkR1cmF0aW9uKCl7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gdGhpcy5wcm9wZXJ0aWVzLmFuaW1hdGlvbkR1cmF0aW9uO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYW5pbWF0aW9uRHVyYXRpb24gPT09IFwic3RyaW5nXCIpe1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludChhbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uRHVyYXRpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgYW5pbWF0aW9uTW9kZSgpe1xuICAgICAgICBpZiAodGhpcy5jdXJySW1hZ2VMb2FkaW5nU3RhdGUgPT09ICdlcnJvcicpe1xuICAgICAgICAgICAgcmV0dXJuICdkZWZhdWx0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmFuaW1hdGlvbk1vZGU7XG4gICAgfVxuXG4gICAgZ2V0IGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuYW5pbWF0aW9uVGltaW5nRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZ2V0IGNsb3NlQnV0dG9uVGV4dCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmNsb3NlQnV0dG9uVGV4dDtcbiAgICB9XG5cbiAgICBnZXQgY291bnRlclNlcGFyYXRvcigpe1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmNvdW50ZXJTZXBhcmF0b3I7XG4gICAgfVxuXG4gICAgZ2V0IGNvdW50ZXIoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEltYWdlSW5kZXggKyAxICsgdGhpcy5jb3VudGVyU2VwYXJhdG9yICsgdGhpcy5pbWFnZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZSl7XG4gICAgICAgIHRoaXMuaXNNb2JpbGUgPSBVdGlscy5tb2JpbGVDaGVjaygpO1xuICAgIH1cblxuICAgIGVtaXRTdGF0ZSh0eXBlLCBzdGF0ZSl7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2luaXRpYWwtdmlydHVhbC1pbWFnZScgfHwgXG4gICAgICAgICAgICBzdGF0ZSA9PT0gJ2luaXRpYWwtc3R5bGVzJyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUgPT09ICdpbml0aWFsLWRlZmF1bHQnIHx8IFxuICAgICAgICAgICAgc3RhdGUgPT09ICdpbml0aWFsLXRodW1ibmFpbC1pbWFnZScpe1xuICAgICAgICAgICAgc3RhdGUgPSAnaW5pdGlhbCc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5lbWl0Q2hhbmdlRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogdHlwZSsnOicrc3RhdGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0U2hvd1N0YXRlKHN0YXRlOiBTaG93U3RhdGUpe1xuICAgICAgICB0aGlzLnNob3dTdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLmVtaXRTdGF0ZSgnc2hvdy1zdGF0ZScsIHN0YXRlKVxuICAgIH1cblxuICAgIHNldENsb3NpbmdTdGF0ZShzdGF0ZTogQ2xvc2luZ1N0YXRlKXtcbiAgICAgICAgdGhpcy5jbG9zaW5nU3RhdGUgPSBzdGF0ZTsgXG4gICAgICAgIHRoaXMuZW1pdFN0YXRlKCdjbG9zaW5nLXN0YXRlJywgc3RhdGUpO1xuICAgIH1cblxuICAgIHNldEFuaW1hdGlvbkR1cmF0aW9uKCl7XG4gICAgICAgIHRoaXMuaG9zdFN0eWxlVHJhbnNpdGlvbiA9ICdiYWNrZ3JvdW5kLWNvbG9yICcrdGhpcy5hbmltYXRpb25EdXJhdGlvbisnbXMnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lclN0eWxlcy50cmFuc2l0aW9uID0gJ2FsbCAnK3RoaXMuYW5pbWF0aW9uRHVyYXRpb24rJ21zICcrdGhpcy5hbmltYXRpb25UaW1pbmdGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBzZXRCYWNrZ3JvdW5kQ29sb3IoKXtcbiAgICAgICAgdGhpcy5ob3N0U3R5bGVCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmJhY2tncm91bmRDb2xvcjtcbiAgICB9XG5cbiAgICBnZXRDb250YWluZXJIZWlnaHQoKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYm5haWxJbWFnZVBvc2l0aW9uLmhlaWdodCAvIHRoaXMuY29udGFpbmVyU2NhbGUgKyAncHgnO1xuICAgIH1cblxuICAgIHNob3dUaHVtYm5haWxJbWFnZSgpIHtcbiAgICAgICAgdGhpcy50aHVtYm5haWxJbWFnZS5zdHlsZS5vcGFjaXR5ID0gJyc7XG4gICAgfVxuXG4gICAgaGlkZVRodW1ibmFpbEltYWdlKCl7XG4gICAgICAgIHRoaXMudGh1bWJuYWlsSW1hZ2Uuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuXG4gICAgdXBkYXRlVGh1bWJuYWlsUG9zaXRpb24oKXtcbiAgICAgICAgdGhpcy5jb250YWluZXJTdHlsZXMudHJhbnNmb3JtID0gdGhpcy5jb250YWluZXJJbml0aWFsUG9zaXRpb247XG4gICAgfVxufSBcbiJdfQ==