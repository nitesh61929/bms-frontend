import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LightboxCommonComponent } from './lightbox-common.component';
import { LightboxComponent } from './lightbox.component';
import { CrystalLightbox } from './lightbox.service';
import { EventService } from './event.service';
import { LightboxDirective } from './lightbox.directive';
import { LightboxGroupDirective } from './lightbox-group.directive';
import * as ɵngcc0 from '@angular/core';
let CrystalLightboxModule = class CrystalLightboxModule {
};
CrystalLightboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CrystalLightboxModule });
CrystalLightboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CrystalLightboxModule_Factory(t) { return new (t || CrystalLightboxModule)(); }, providers: [
        CrystalLightbox,
        EventService
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CrystalLightboxModule, { declarations: function () { return [LightboxCommonComponent,
        LightboxComponent,
        LightboxDirective,
        LightboxGroupDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [LightboxDirective,
        LightboxGroupDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CrystalLightboxModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    LightboxCommonComponent,
                    LightboxComponent,
                    LightboxDirective,
                    LightboxGroupDirective
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    LightboxDirective,
                    LightboxGroupDirective
                ],
                providers: [
                    CrystalLightbox,
                    EventService
                ],
                bootstrap: [],
                entryComponents: [
                    LightboxComponent
                ]
            }]
    }], null, null); })();
export { CrystalLightboxModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3gubW9kdWxlLmpzIiwic291cmNlcyI6WyJAY3J5c3RhbHVpL2FuZ3VsYXItbGlnaHRib3gvbGliL2xpZ2h0Ym94Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFLLG9CQUFvQixDQUFBO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBSyxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBSyw0QkFBNEIsQ0FBQzs7QUEyQm5FLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0FBQUksQ0FBQSxDQUFBO0NBQXpCLHFCQUFxQixxQkF6QmpDLFFBQVEsQ0FBQyxXQUNOLFlBQVksRUFBRTtLQUNWLHVCQUF1QixlQUN2QixpQkFBaUIsZUFDakIsaUJBQWlCLGVBQ2pCLHNCQUFzQixXQUN6QixXQUNELE9BQU8sRUFBRTtRQUNMLFlBQVk7TUFDZixXQUNEO0dBQU8sRUFBRTtDQUNMLGlCQUFpQjtRQUNqQjtlQUFzQixXQUN6QixXQUNELFNBQVMsRUFBRSxlQUNQLGVBQWUsZUFDZixZQUFZLFdBQ2YsV0FDRCxTQUFTLEVBQUUsRUFFVixXQUNELGVBQWUsRUFBRTtLQUNiLGlCQUFpQjtNQUNwQixPQUNKLENBQUMsS0FDVzthQUFxQixDQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ3RDOztBQW5DQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQTJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQXpCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IExpZ2h0Ym94Q29tbW9uQ29tcG9uZW50IH0gZnJvbSAnLi9saWdodGJveC1jb21tb24uY29tcG9uZW50JztcbmltcG9ydCB7IExpZ2h0Ym94Q29tcG9uZW50IH0gZnJvbSAnLi9saWdodGJveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ3J5c3RhbExpZ2h0Ym94IH0gZnJvbScuL2xpZ2h0Ym94LnNlcnZpY2UnIFxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi9ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IExpZ2h0Ym94RGlyZWN0aXZlIH0gZnJvbScuL2xpZ2h0Ym94LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBMaWdodGJveEdyb3VwRGlyZWN0aXZlIH0gZnJvbScuL2xpZ2h0Ym94LWdyb3VwLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIExpZ2h0Ym94Q29tbW9uQ29tcG9uZW50LFxuICAgICAgICBMaWdodGJveENvbXBvbmVudCxcbiAgICAgICAgTGlnaHRib3hEaXJlY3RpdmUsXG4gICAgICAgIExpZ2h0Ym94R3JvdXBEaXJlY3RpdmVcbiAgICBdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIExpZ2h0Ym94RGlyZWN0aXZlLFxuICAgICAgICBMaWdodGJveEdyb3VwRGlyZWN0aXZlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQ3J5c3RhbExpZ2h0Ym94LFxuICAgICAgICBFdmVudFNlcnZpY2VcbiAgICBdLFxuICAgIGJvb3RzdHJhcDogW1xuICAgICAgICBcbiAgICBdLFxuICAgIGVudHJ5Q29tcG9uZW50czogW1xuICAgICAgICBMaWdodGJveENvbXBvbmVudFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgQ3J5c3RhbExpZ2h0Ym94TW9kdWxlIHsgfVxuIl19