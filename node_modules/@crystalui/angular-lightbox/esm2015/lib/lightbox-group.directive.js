import { __decorate } from "tslib";
import { Directive, HostBinding, ContentChildren } from '@angular/core';
import { EventService } from './event.service';
import { LightboxDirective } from './lightbox.directive';
import { CrystalLightbox } from './lightbox.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './event.service';
import * as ɵngcc2 from './lightbox.service';
let LightboxGroupDirective = class LightboxGroupDirective {
    constructor(eventService, lightbox) {
        this.eventService = eventService;
        this.lightbox = lightbox;
        this.thumbnailImages = [];
        this.images = [];
        this.properties = {};
        this.hostLightboxGroup = true;
        this.globalEventsSubscription = this.eventService.emitter.subscribe((event) => {
            this.handleGlobalEvents(event);
        });
    }
    get lightboxDirectiveList() {
        if (this._lightboxDirectiveList) {
            return this._lightboxDirectiveList.toArray();
        }
        else {
            return [];
        }
    }
    handleGlobalEvents(event) {
        if (event.type === 'thumbnail:click') {
            this.thumbnailImageElement = event.elementRef.nativeElement;
            this.thumbnailImages = this.getThumbnailImages();
            this.thumbnailImageIndex = this.getThumbnailImageIndex(this.thumbnailImageElement);
            if (this.thumbnailImageIndex == undefined) {
                return;
            }
            this.thumbnailLightboxDirective = this.getThumbnailLightboxDirective(this.thumbnailImageIndex);
            this.images = this.getImages();
            this.properties = event.properties;
            this.properties.index = this.thumbnailImageIndex;
            this.lightbox.open({
                images: this.images,
                //index: this.thumbnailImageIndex,
                properties: this.properties
            });
        }
    }
    getThumbnailImageIndex(element) {
        const images = this.thumbnailImages;
        for (var i = 0; i < images.length; i++) {
            if (element === images[i]) {
                return i;
            }
        }
    }
    getThumbnailLightboxDirective(index) {
        return this.lightboxDirectiveList[index];
    }
    getThumbnailImages() {
        let thumbnailImages = [];
        this.lightboxDirectiveList.forEach(el => {
            thumbnailImages.push(el['elementRef'].nativeElement);
        });
        return thumbnailImages;
    }
    getImages() {
        let images = [];
        this.lightboxDirectiveList.forEach(el => {
            let image = {};
            const nativeElement = el['elementRef'].nativeElement;
            if (el.fullImage) {
                image.fullImage = el.fullImage;
            }
            image.thumbnailImage = {
                path: nativeElement.src,
                height: nativeElement.naturalHeight,
                width: nativeElement.naturalWidth
            };
            image.nativeElement = nativeElement;
            images.push(image);
        });
        return images;
    }
};
LightboxGroupDirective.ɵfac = function LightboxGroupDirective_Factory(t) { return new (t || LightboxGroupDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.EventService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CrystalLightbox)); };
LightboxGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LightboxGroupDirective, selectors: [["", "lightbox-group", ""]], contentQueries: function LightboxGroupDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, LightboxDirective, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lightboxDirectiveList = _t);
    } }, hostVars: 2, hostBindings: function LightboxGroupDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("lightbox-group", ctx.hostLightboxGroup);
    } } });
LightboxGroupDirective.ctorParameters = () => [
    { type: EventService },
    { type: CrystalLightbox }
];
__decorate([
    HostBinding('class.lightbox-group')
], LightboxGroupDirective.prototype, "hostLightboxGroup", void 0);
__decorate([
    ContentChildren(LightboxDirective, { descendants: true })
], LightboxGroupDirective.prototype, "_lightboxDirectiveList", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LightboxGroupDirective, [{
        type: Directive,
        args: [{
                selector: '[lightbox-group]'
            }]
    }], function () { return [{ type: ɵngcc1.EventService }, { type: ɵngcc2.CrystalLightbox }]; }, { hostLightboxGroup: [{
            type: HostBinding,
            args: ['class.lightbox-group']
        }], _lightboxDirectiveList: [{
            type: ContentChildren,
            args: [LightboxDirective, { descendants: true }]
        }] }); })();
export { LightboxGroupDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,