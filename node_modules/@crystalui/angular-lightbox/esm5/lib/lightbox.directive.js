import { __decorate } from "tslib";
import { Directive, ElementRef, Input, Output, HostListener, HostBinding, OnInit, EventEmitter } from '@angular/core';
import { EventService } from './event.service';
import { CrystalLightbox } from './lightbox.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './lightbox.service';
import * as ɵngcc2 from './event.service';
var LightboxDirective = /** @class */ (function () {
    function LightboxDirective(lightbox, eventService, elementRef) {
        var _this = this;
        this.lightbox = lightbox;
        this.eventService = eventService;
        this.elementRef = elementRef;
        this.properties = {};
        this.events = new EventEmitter();
        this.hostLightboxGroup = true;
        this.globalEventsSubscription = this.eventService.emitter.subscribe(function (event) {
            _this.handleGlobalEvents(event);
        });
    }
    Object.defineProperty(LightboxDirective.prototype, "hostSimpleMode", {
        get: function () {
            return this.simpleMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxDirective.prototype, "isGroupImage", {
        get: function () {
            return this.elementRef.nativeElement.closest(".lightbox-group");
        },
        enumerable: true,
        configurable: true
    });
    LightboxDirective.prototype.onClick = function (event) {
        if (this.disable) {
            return;
        }
        if (this.isGroupImage) {
            this.eventService.emitChangeEvent({
                type: 'thumbnail:click',
                elementRef: this.elementRef,
                properties: this.properties
            });
        }
        else {
            this.image = this.getImage();
            this.lightbox.open({
                images: [this.image],
                properties: this.properties,
                index: 0
            });
        }
    };
    LightboxDirective.prototype.ngOnChanges = function (changes) {
        this.properties = Object.assign({}, this.properties, this.getProperties(changes));
    };
    LightboxDirective.prototype.handleGlobalEvents = function (event) {
        this.events.emit(event);
    };
    LightboxDirective.prototype.getImage = function () {
        var image = {};
        var nativeElement = this.elementRef.nativeElement;
        if (this.fullImage) {
            image.fullImage = this.fullImage;
        }
        image.thumbnailImage = {
            path: nativeElement.src,
            height: nativeElement.naturalHeight,
            width: nativeElement.naturalWidth
        };
        image.nativeElement = nativeElement;
        return image;
    };
    ;
    LightboxDirective.prototype.getProperties = function (changes) {
        var properties = {};
        for (var prop in changes) {
            if (prop !== 'fullImage') {
                properties[prop] = changes[prop].currentValue;
            }
        }
        return properties;
    };
    LightboxDirective.ctorParameters = function () { return [
        { type: CrystalLightbox },
        { type: EventService },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], LightboxDirective.prototype, "fullImage", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "properties", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "loop", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "backgroundOpacity", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "counter", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "imageMaxHeight", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "imageMaxWidth", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "animationDuration", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "animationMode", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "animationTimingFunction", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "closeButtonText", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "counterSeparator", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "disable", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "simpleMode", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "backgroundColor", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "hideThumbnail", void 0);
    __decorate([
        Input()
    ], LightboxDirective.prototype, "gestureEnable", void 0);
    __decorate([
        Output()
    ], LightboxDirective.prototype, "events", void 0);
    __decorate([
        HostBinding('class.lightbox-single')
    ], LightboxDirective.prototype, "hostLightboxGroup", void 0);
    __decorate([
        HostBinding('class.lightbox-simple-mode')
    ], LightboxDirective.prototype, "hostSimpleMode", null);
    __decorate([
        HostListener('click', ['$event'])
    ], LightboxDirective.prototype, "onClick", null);
LightboxDirective.ɵfac = function LightboxDirective_Factory(t) { return new (t || LightboxDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CrystalLightbox), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.EventService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LightboxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LightboxDirective, selectors: [["", "lightbox", ""]], hostVars: 4, hostBindings: function LightboxDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function LightboxDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("lightbox-single", ctx.hostLightboxGroup)("lightbox-simple-mode", ctx.hostSimpleMode);
    } }, inputs: { properties: "properties", fullImage: "fullImage", loop: "loop", backgroundOpacity: "backgroundOpacity", counter: "counter", imageMaxHeight: "imageMaxHeight", imageMaxWidth: "imageMaxWidth", animationDuration: "animationDuration", animationMode: "animationMode", animationTimingFunction: "animationTimingFunction", closeButtonText: "closeButtonText", counterSeparator: "counterSeparator", disable: "disable", simpleMode: "simpleMode", backgroundColor: "backgroundColor", hideThumbnail: "hideThumbnail", gestureEnable: "gestureEnable" }, outputs: { events: "events" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LightboxDirective, [{
        type: Directive,
        args: [{
                selector: '[lightbox]'
            }]
    }], function () { return [{ type: ɵngcc1.CrystalLightbox }, { type: ɵngcc2.EventService }, { type: ɵngcc0.ElementRef }]; }, { properties: [{
            type: Input
        }], events: [{
            type: Output
        }], hostLightboxGroup: [{
            type: HostBinding,
            args: ['class.lightbox-single']
        }], hostSimpleMode: [{
            type: HostBinding,
            args: ['class.lightbox-simple-mode']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], fullImage: [{
            type: Input
        }], loop: [{
            type: Input
        }], backgroundOpacity: [{
            type: Input
        }], counter: [{
            type: Input
        }], imageMaxHeight: [{
            type: Input
        }], imageMaxWidth: [{
            type: Input
        }], animationDuration: [{
            type: Input
        }], animationMode: [{
            type: Input
        }], animationTimingFunction: [{
            type: Input
        }], closeButtonText: [{
            type: Input
        }], counterSeparator: [{
            type: Input
        }], disable: [{
            type: Input
        }], simpleMode: [{
            type: Input
        }], backgroundColor: [{
            type: Input
        }], hideThumbnail: [{
            type: Input
        }], gestureEnable: [{
            type: Input
        }] }); })();
    return LightboxDirective;
}());
export { LightboxDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,