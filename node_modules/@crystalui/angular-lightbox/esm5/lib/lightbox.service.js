import { __decorate } from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, EmbeddedViewRef, ApplicationRef, ComponentRef } from '@angular/core';
import { LightboxComponent } from './lightbox.component';
import { DefaultProperties } from './default-properties';
import * as ɵngcc0 from '@angular/core';
var CrystalLightbox = /** @class */ (function () {
    function CrystalLightbox(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    CrystalLightbox.prototype.appendComponentToBody = function (component, lightboxData) {
        var _this = this;
        var componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        componentRef.instance.lightboxData = lightboxData;
        this.appRef.attachView(componentRef.hostView);
        var domElem = componentRef.hostView.rootNodes[0];
        // Add to body
        document.body.appendChild(domElem);
        componentRef.instance.events.subscribe(function (event) {
            if (event.type === 'close') {
                _this.appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            }
        });
    };
    CrystalLightbox.prototype.open = function (lightboxData) {
        lightboxData.properties = this.applyPropertieDefaults(DefaultProperties, lightboxData.properties);
        var component = this.getLightboxComponent();
        this.appendComponentToBody(component, lightboxData);
    };
    CrystalLightbox.prototype.getLightboxComponent = function () {
        return LightboxComponent;
    };
    CrystalLightbox.prototype.applyPropertieDefaults = function (defaultProperties, properties) {
        if (!properties) {
            properties = {};
        }
        if (!properties.index) {
            properties.index = 0;
        }
        this._defaultProperties = Object.assign({}, defaultProperties);
        return Object.assign(this._defaultProperties, properties);
    };
    CrystalLightbox.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
CrystalLightbox.ɵfac = function CrystalLightbox_Factory(t) { return new (t || CrystalLightbox)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
CrystalLightbox.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CrystalLightbox, factory: function (t) { return CrystalLightbox.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CrystalLightbox, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return CrystalLightbox;
}());
export { CrystalLightbox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3guc2VydmljZS5qcyIsInNvdXJjZXMiOlsiQGNyeXN0YWx1aS9hbmd1bGFyLWxpZ2h0Ym94L2xpYi9saWdodGJveC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFRekQ7QUFFQyxJQUVBLHlCQUNTLHdCQUFrRCxFQUNsRCxNQUFzQixFQUN0QixRQUFrQjtBQUMzQixRQUhTLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7QUFDNUQsUUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtBQUNoQyxRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBRSxJQUM3QixDQUFDO0FBQ0QsSUFDQSwrQ0FBcUIsR0FBckIsVUFBc0IsU0FBYyxFQUFFLFlBQTBCO0FBQUssUUFBckUsaUJBbUJDO0FBRUYsUUFwQlEsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHdCQUF3QjtBQUN6RCxhQUFZLHVCQUF1QixDQUFDLFNBQVMsQ0FBQztBQUM5QyxhQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFbkMsUUFBZ0IsWUFBWSxDQUFDLFFBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRW5FLFFBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9DLFFBQUMsSUFBTSxPQUFPLEdBQUksWUFBWSxDQUFDLFFBQWlDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBZ0IsQ0FBQztBQUU5RixRQUFFLGNBQWM7QUFDZixRQUFDLFFBQVEsQ0FBQyxJQUFJ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QUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBL0NBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBcURBLEFBQUEsQUFBQSxBQUFBLEFBckRBLEFBcURBLEFBckRBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbWJlZGRlZFZpZXdSZWYsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpZ2h0Ym94Q29tcG9uZW50IH0gZnJvbSAnLi9saWdodGJveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJvcGVydGllcywgTGlnaHRib3hEYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IERlZmF1bHRQcm9wZXJ0aWVzIH0gZnJvbSAnLi9kZWZhdWx0LXByb3BlcnRpZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFkQ29tcG9uZW50IHtcblx0bGlnaHRib3hEYXRhOiBMaWdodGJveERhdGE7IFxuXHRldmVudHM6IGFueTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENyeXN0YWxMaWdodGJveCB7XG5cdGlzTW9iaWxlOiBib29sZWFuO1xuXHRfZGVmYXVsdFByb3BlcnRpZXM6IFByb3BlcnRpZXM7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcblx0XHRwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG5cdFx0cHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpeyBcblx0fVxuIFxuXHRhcHBlbmRDb21wb25lbnRUb0JvZHkoY29tcG9uZW50OiBhbnksIGxpZ2h0Ym94RGF0YTogTGlnaHRib3hEYXRhKSB7XHRcdFxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxuICAgICAgICAgICAgLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudClcbiAgICAgICAgICAgIC5jcmVhdGUodGhpcy5pbmplY3Rvcik7XG5cblx0XHQoPEFkQ29tcG9uZW50PmNvbXBvbmVudFJlZi5pbnN0YW5jZSkubGlnaHRib3hEYXRhID0gbGlnaHRib3hEYXRhO1xuXG5cdFx0dGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXHRcdGNvbnN0IGRvbUVsZW0gPSAoY29tcG9uZW50UmVmLmhvc3RWaWV3IGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KS5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XG5cblx0XHQvLyBBZGQgdG8gYm9keVxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9tRWxlbSk7XG5cdFx0XG4gICAgICAgICg8QWRDb21wb25lbnQ+Y29tcG9uZW50UmVmLmluc3RhbmNlKS5ldmVudHMuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBcdGlmIChldmVudC50eXBlID09PSAnY2xvc2UnKXtcblx0XHRcdFx0dGhpcy5hcHBSZWYuZGV0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXHRcdFx0XHRjb21wb25lbnRSZWYuZGVzdHJveSgpO1xuXHRcdFx0fVxuICAgICAgICB9KTtcblx0fVxuXG5cblx0b3BlbihsaWdodGJveERhdGE6IExpZ2h0Ym94RGF0YSl7XG5cdFx0bGlnaHRib3hEYXRhLnByb3BlcnRpZXMgPSB0aGlzLmFwcGx5UHJvcGVydGllRGVmYXVsdHMoRGVmYXVsdFByb3BlcnRpZXMsIGxpZ2h0Ym94RGF0YS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IHRoaXMuZ2V0TGlnaHRib3hDb21wb25lbnQoKTtcblx0XHR0aGlzLmFwcGVuZENvbXBvbmVudFRvQm9keShjb21wb25lbnQsIGxpZ2h0Ym94RGF0YSk7XG5cdH1cblxuXHRnZXRMaWdodGJveENvbXBvbmVudCgpe1xuXHRcdHJldHVybiBMaWdodGJveENvbXBvbmVudDtcblx0fVxuXG5cdGFwcGx5UHJvcGVydGllRGVmYXVsdHMoZGVmYXVsdFByb3BlcnRpZXMsIHByb3BlcnRpZXMpe1xuXHRcdGlmICghcHJvcGVydGllcykge1xuXHRcdFx0cHJvcGVydGllcyA9IHt9O1xuXHRcdH1cblxuXHRcdGlmICghcHJvcGVydGllcy5pbmRleCl7IFxuXHRcdFx0cHJvcGVydGllcy5pbmRleCA9IDA7XG5cdFx0fVxuXHRcdHRoaXMuX2RlZmF1bHRQcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFByb3BlcnRpZXMpO1xuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuX2RlZmF1bHRQcm9wZXJ0aWVzLCBwcm9wZXJ0aWVzKTtcblx0fVxufSJdfQ==