import { __decorate } from "tslib";
import { Component, Input, HostBinding, ViewChild } from '@angular/core';
import { EventService } from './event.service';
import { Utils } from './utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './event.service';

var _c0 = ["imageFirst"];
var _c1 = ["imageSecond"];
var _c2 = ["imageLast"];
var _c3 = ["lightboxImage"];
var LightboxCommonComponent = /** @class */ (function () {
    function LightboxCommonComponent(eventService) {
        this.eventService = eventService;
        this.currentImageIndex = 0;
        this.indexCurrentSlide = 1;
        this.containerStyles = {
            transition: '',
            transform: '',
            width: '',
            height: '',
            opacity: ''
        };
        this.currImageLoadingState = 'not-loaded';
        this.isMobile = Utils.mobileCheck();
    }
    Object.defineProperty(LightboxCommonComponent.prototype, "lightboxImage", {
        get: function () {
            return this._lightboxImage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "lightboxImageElement", {
        get: function () {
            if (this.lightboxImage) {
                return this.lightboxImage.nativeElement;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "lightboxImageNaturalHeight", {
        get: function () {
            if (this.lightboxImageElement) {
                return this.lightboxImageElement.naturalHeight;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "lightboxImageNaturalWidth", {
        get: function () {
            if (this.lightboxImageElement) {
                return this.lightboxImageElement.naturalWidth;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "index", {
        get: function () {
            return this.currentImageIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "properties", {
        get: function () {
            return this.lightboxData.properties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "images", {
        get: function () {
            return this.lightboxData.images || [this.lightboxData.image];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "thumbnailImage", {
        get: function () {
            return this.images[this.currentImageIndex].nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "thumbnailImagePosition", {
        get: function () {
            return this.thumbnailImage.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "virtualImageDimension", {
        // Image size if it is larger than the window size
        get: function () {
            var height = this.lightboxImageNaturalHeight;
            var width = height * this.imageAspectRatio;
            var windowWidth = document.body.clientWidth;
            var windowHeight = window.innerHeight;
            if (this.isImageLargerWindow) {
                if (height > windowHeight) {
                    height = windowHeight;
                    width = height * this.imageAspectRatio;
                }
                if (width > windowWidth) {
                    width = windowWidth;
                    height = width / this.imageAspectRatio;
                }
            }
            else {
                width = this.lightboxImageNaturalWidth;
                height = this.lightboxImageNaturalHeight;
            }
            if (width === 0 || Number.parseInt(height) === 0) {
                return { width: 200, height: 200 };
            }
            return { width: width, height: height };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "containerInitialPosition", {
        get: function () {
            var scale = (this.showState === 'initial-thumbnail-image') ? 1 : this.containerScale;
            var top = this.thumbnailImagePosition.top;
            var left = this.thumbnailImagePosition.left;
            return 'matrix(' + scale + ', 0, 0, ' + scale + ',' + left + ',' + top + ')';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "containerFullscreenPosition", {
        get: function () {
            var left = (document.body.clientWidth - this.virtualImageDimension.width) / 2;
            var top = (window.innerHeight - this.virtualImageDimension.height) / 2;
            return 'translate3d(' + left + 'px, ' + top + 'px, 0)';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "containerScale", {
        get: function () {
            return this.thumbnailImagePosition.width / this.virtualImageDimension.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "imageAspectRatio", {
        get: function () {
            return this.thumbnailImage.naturalWidth / this.thumbnailImage.naturalHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "isImageLargerWindow", {
        get: function () {
            var imageNaturalWidth = this.lightboxImageNaturalWidth;
            var imageNaturalHeight = this.lightboxImageNaturalHeight;
            var windowWidth = document.body.clientWidth;
            var windowHeight = window.innerHeight;
            return imageNaturalWidth > windowWidth || imageNaturalHeight > windowHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "isFirstImage", {
        get: function () {
            if (this.properties.loop) {
                return false;
            }
            else {
                return this.index === 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "isLastImage", {
        get: function () {
            if (this.properties.loop) {
                return false;
            }
            else {
                return this.index === this.latestImageIndex;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "latestImageIndex", {
        get: function () {
            return this.images.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "backgroundColor", {
        get: function () {
            var opacity = this.properties.backgroundOpacity;
            var color = this.properties.backgroundColor;
            if (color === 'black') {
                return 'rgba(0, 0, 0, ' + opacity + ')';
            }
            else {
                return 'rgba(255, 255, 255, ' + opacity + ')';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "animationDuration", {
        get: function () {
            var animationDuration = this.properties.animationDuration;
            if (typeof animationDuration === "string") {
                return Number.parseInt(animationDuration);
            }
            else {
                return animationDuration;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "animationMode", {
        get: function () {
            if (this.currImageLoadingState === 'error') {
                return 'default';
            }
            return this.properties.animationMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "animationTimingFunction", {
        get: function () {
            return this.properties.animationTimingFunction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "closeButtonText", {
        get: function () {
            return this.properties.closeButtonText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "counterSeparator", {
        get: function () {
            return this.properties.counterSeparator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxCommonComponent.prototype, "counter", {
        get: function () {
            return this.currentImageIndex + 1 + this.counterSeparator + this.images.length;
        },
        enumerable: true,
        configurable: true
    });
    LightboxCommonComponent.prototype.emitState = function (type, state) {
        if (state === 'initial-virtual-image' ||
            state === 'initial-styles') {
            return;
        }
        if (state === 'initial-default' ||
            state === 'initial-thumbnail-image') {
            state = 'initial';
        }
        this.eventService.emitChangeEvent({
            type: type + ':' + state
        });
    };
    LightboxCommonComponent.prototype.setShowState = function (state) {
        this.showState = state;
        this.emitState('show-state', state);
    };
    LightboxCommonComponent.prototype.setClosingState = function (state) {
        this.closingState = state;
        this.emitState('closing-state', state);
    };
    LightboxCommonComponent.prototype.setAnimationDuration = function () {
        this.hostStyleTransition = 'background-color ' + this.animationDuration + 'ms';
        this.containerStyles.transition = 'all ' + this.animationDuration + 'ms ' + this.animationTimingFunction;
    };
    LightboxCommonComponent.prototype.setBackgroundColor = function () {
        this.hostStyleBackgroundColor = this.backgroundColor;
    };
    LightboxCommonComponent.prototype.getContainerHeight = function () {
        return this.thumbnailImagePosition.height / this.containerScale + 'px';
    };
    LightboxCommonComponent.prototype.showThumbnailImage = function () {
        this.thumbnailImage.style.opacity = '';
    };
    LightboxCommonComponent.prototype.hideThumbnailImage = function () {
        this.thumbnailImage.style.opacity = 0;
    };
    LightboxCommonComponent.prototype.updateThumbnailPosition = function () {
        this.containerStyles.transform = this.containerInitialPosition;
    };
    LightboxCommonComponent.ctorParameters = function () { return [
        { type: EventService }
    ]; };
    __decorate([
        Input()
    ], LightboxCommonComponent.prototype, "lightboxData", void 0);
    __decorate([
        HostBinding('style.backgroundColor')
    ], LightboxCommonComponent.prototype, "hostStyleBackgroundColor", void 0);
    __decorate([
        HostBinding('style.transition')
    ], LightboxCommonComponent.prototype, "hostStyleTransition", void 0);
    __decorate([
        ViewChild('imageFirst', { static: true })
    ], LightboxCommonComponent.prototype, "_imageFirst", void 0);
    __decorate([
        ViewChild('imageSecond', { static: true })
    ], LightboxCommonComponent.prototype, "_imageSecond", void 0);
    __decorate([
        ViewChild('imageLast', { static: true })
    ], LightboxCommonComponent.prototype, "_imageLast", void 0);
    __decorate([
        ViewChild('lightboxImage', { static: true })
    ], LightboxCommonComponent.prototype, "_lightboxImage", void 0);
LightboxCommonComponent.ɵfac = function LightboxCommonComponent_Factory(t) { return new (t || LightboxCommonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.EventService)); };
LightboxCommonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LightboxCommonComponent, selectors: [["lightbox-common"]], viewQuery: function LightboxCommonComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3);
        ɵngcc0.ɵɵviewQuery(_c1, 3);
        ɵngcc0.ɵɵviewQuery(_c2, 3);
        ɵngcc0.ɵɵviewQuery(_c3, 3);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._imageFirst = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._imageSecond = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._imageLast = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lightboxImage = _t.first);
    } }, hostVars: 4, hostBindings: function LightboxCommonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("transition", ctx.hostStyleTransition)("background-color", ctx.hostStyleBackgroundColor);
    } }, inputs: { lightboxData: "lightboxData" }, decls: 0, vars: 0, template: function LightboxCommonComponent_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LightboxCommonComponent, [{
        type: Component,
        args: [{
                selector: 'lightbox-common',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc1.EventService }]; }, { hostStyleTransition: [{
            type: HostBinding,
            args: ['style.transition']
        }], hostStyleBackgroundColor: [{
            type: HostBinding,
            args: ['style.backgroundColor']
        }], lightboxData: [{
            type: Input
        }], _imageFirst: [{
            type: ViewChild,
            args: ['imageFirst', { static: true }]
        }], _imageSecond: [{
            type: ViewChild,
            args: ['imageSecond', { static: true }]
        }], _imageLast: [{
            type: ViewChild,
            args: ['imageLast', { static: true }]
        }], _lightboxImage: [{
            type: ViewChild,
            args: ['lightboxImage', { static: true }]
        }] }); })();
    return LightboxCommonComponent;
}());
export { LightboxCommonComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,