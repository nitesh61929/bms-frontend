import { __decorate } from "tslib";
import { Directive, HostBinding, ContentChildren } from '@angular/core';
import { EventService } from './event.service';
import { LightboxDirective } from './lightbox.directive';
import { CrystalLightbox } from './lightbox.service';
var LightboxGroupDirective = /** @class */ (function () {
    function LightboxGroupDirective(eventService, lightbox) {
        var _this = this;
        this.eventService = eventService;
        this.lightbox = lightbox;
        this.thumbnailImages = [];
        this.images = [];
        this.properties = {};
        this.hostLightboxGroup = true;
        this.globalEventsSubscription = this.eventService.emitter.subscribe(function (event) {
            _this.handleGlobalEvents(event);
        });
    }
    Object.defineProperty(LightboxGroupDirective.prototype, "lightboxDirectiveList", {
        get: function () {
            if (this._lightboxDirectiveList) {
                return this._lightboxDirectiveList.toArray();
            }
            else {
                return [];
            }
        },
        enumerable: true,
        configurable: true
    });
    LightboxGroupDirective.prototype.handleGlobalEvents = function (event) {
        if (event.type === 'thumbnail:click') {
            this.thumbnailImageElement = event.elementRef.nativeElement;
            this.thumbnailImages = this.getThumbnailImages();
            this.thumbnailImageIndex = this.getThumbnailImageIndex(this.thumbnailImageElement);
            if (this.thumbnailImageIndex == undefined) {
                return;
            }
            this.thumbnailLightboxDirective = this.getThumbnailLightboxDirective(this.thumbnailImageIndex);
            this.images = this.getImages();
            this.properties = event.properties;
            this.properties.index = this.thumbnailImageIndex;
            this.lightbox.open({
                images: this.images,
                //index: this.thumbnailImageIndex,
                properties: this.properties
            });
        }
    };
    LightboxGroupDirective.prototype.getThumbnailImageIndex = function (element) {
        var images = this.thumbnailImages;
        for (var i = 0; i < images.length; i++) {
            if (element === images[i]) {
                return i;
            }
        }
    };
    LightboxGroupDirective.prototype.getThumbnailLightboxDirective = function (index) {
        return this.lightboxDirectiveList[index];
    };
    LightboxGroupDirective.prototype.getThumbnailImages = function () {
        var thumbnailImages = [];
        this.lightboxDirectiveList.forEach(function (el) {
            thumbnailImages.push(el['elementRef'].nativeElement);
        });
        return thumbnailImages;
    };
    LightboxGroupDirective.prototype.getImages = function () {
        var images = [];
        this.lightboxDirectiveList.forEach(function (el) {
            var image = {};
            var nativeElement = el['elementRef'].nativeElement;
            if (el.fullImage) {
                image.fullImage = el.fullImage;
            }
            image.thumbnailImage = {
                path: nativeElement.src,
                height: nativeElement.naturalHeight,
                width: nativeElement.naturalWidth
            };
            image.nativeElement = nativeElement;
            images.push(image);
        });
        return images;
    };
    LightboxGroupDirective.ctorParameters = function () { return [
        { type: EventService },
        { type: CrystalLightbox }
    ]; };
    __decorate([
        HostBinding('class.lightbox-group')
    ], LightboxGroupDirective.prototype, "hostLightboxGroup", void 0);
    __decorate([
        ContentChildren(LightboxDirective, { descendants: true })
    ], LightboxGroupDirective.prototype, "_lightboxDirectiveList", void 0);
    LightboxGroupDirective = __decorate([
        Directive({
            selector: '[lightbox-group]'
        })
    ], LightboxGroupDirective);
    return LightboxGroupDirective;
}());
export { LightboxGroupDirective };
//# sourceMappingURL=data:application/json;base64,