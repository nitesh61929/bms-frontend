{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/create-effect-migration/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,yDAA+D;AAC/D,oEAK0C;AAE1C,SAAgB,iBAAiB;IAC/B,OAAO,UAAC,IAAU;QAChB,OAAA,IAAI,CAAC,KAAK,CAAC,UAAC,IAAI;YACd,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACzB,OAAO;aACR;YAED,IAAM,UAAU,GAAG,EAAE,CAAC,gBAAgB,CACpC,IAAI,EACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC,QAAQ,EAAE,EAC3B,EAAE,CAAC,YAAY,CAAC,MAAM,CACvB,CAAC;YAEF,IAAI,UAAU,CAAC,iBAAiB,EAAE;gBAChC,OAAO;aACR;YAED,IAAM,eAAe,GAAG,UAAU,CAAC,UAAU;iBAC1C,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC;iBAC7B,GAAG,CAAC,UAAC,IAAI;gBACR,OAAA,IAAI,CAAC,OAAO;qBACT,MAAM,CAAC,EAAE,CAAC,qBAAqB,CAAC;qBAChC,MAAM,CACL,UAAC,QAAQ;oBACP,OAAA,QAAQ,CAAC,UAAU;wBACnB,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAD3C,CAC2C,CAC9C;YANH,CAMG,CACJ,CAAC;YAEJ,IAAM,OAAO,GAAG,eAAe,CAAC,MAAM,CACpC,UAAC,GAAG,EAAE,OAAO,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAnB,CAAmB,EACrC,EAAE,CACH,CAAC;YAEF,IAAM,oBAAoB,GAAG,uBAAuB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC1E,IAAM,aAAa,GAAG,+BAAa,CACjC,UAAU,EACV,IAAI,EACJ,eAAe,EACf,QAAQ,EACR,cAAc,CACf,CAAC;YAEF,OAAO,+BAAa,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,WACzC,aAAa,EACb,oBAAoB,EACvB,CAAC;QACL,CAAC,CAAC;IA7CF,CA6CE,CAAC;AACP,CAAC;AAhDD,8CAgDC;AAED,SAAS,uBAAuB,CAC9B,IAAU,EACV,IAAU,EACV,OAAiC;IAEjC,IAAM,OAAO,GAAG,OAAO;SACpB,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,CAAC,MAAM,CAAC,WAAW,EAApB,CAAoB,CAAC;SACxC,GAAG,CAAC,UAAC,MAAM;QACV,IAAM,SAAS,GAAG,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAE,CAAC;QACrE,IAAM,eAAe,GAAG,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QACrE,IAAM,GAAG,GAAG,eAAe,CAAC,CAAC,CAAC,OAAK,eAAe,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAE5D,OAAO;YACL,IAAI,8BAAY,CAAC,IAAI,EAAE,MAAM,CAAC,WAAY,CAAC,GAAG,EAAE,qBAAqB,CAAC;YACtE,IAAI,8BAAY,CAAC,IAAI,EAAE,MAAM,CAAC,WAAY,CAAC,GAAG,EAAE,GAAG,CAAC;SACrD,CAAC;IACJ,CAAC,CAAC;SACD,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAnB,CAAmB,EAAE,EAAE,CAAC,CAAC;IAErD,IAAM,OAAO,GAAG,OAAO;SACpB,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,UAAU,EAAjB,CAAiB,CAAC;SAClC,MAAM,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,EAAV,CAAU,CAAC;SAClC,GAAG,CAAC,UAAC,UAAU;QACd,IAAM,gBAAgB,GAAG,UAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC/D,OAAO,gBAAgB,CAAC,GAAG,CAAC,UAAC,SAAS;YACpC,OAAO,IAAI,8BAAY,CACrB,IAAI,EACJ,SAAS,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,EAAE,sBAAsB;YACpD,SAAS,CAAC,UAAU,CAAC,GAAG,CACzB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;SACD,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAnB,CAAmB,EAAE,EAAE,CAAC,CAAC;IAErD,gBAAW,OAAO,EAAK,OAAO,EAAE;AAClC,CAAC;AAED,SAAS,iBAAiB,CAAC,SAAuB;IAChD,OAAO,CACL,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC;QACzC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC;QAChD,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,KAAK,QAAQ,CAClD,CAAC;AACJ,CAAC;AAED,SAAS,qBAAqB,CAC5B,IAAU,EACV,IAAU,EACV,SAAuB;IAEvB,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;QACvE,OAAO,EAAE,CAAC;KACX;IAED,kCAAkC;IAClC,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAClD,IAAM,IAAI,GAAG,OAAO;SACjB,SAAS,CACR,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAClC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CACnC;SACA,IAAI,EAAE,CAAC;IACV,OAAO,IAAI,CAAC;AACd,CAAC;AAED;IACE,OAAO,kBAAK,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;AACtC,CAAC;AAFD,+BAEC","sourcesContent":["import * as ts from 'typescript';\nimport { Path } from '@angular-devkit/core';\nimport { Tree, Rule, chain } from '@angular-devkit/schematics';\nimport {\n  InsertChange,\n  RemoveChange,\n  replaceImport,\n  commitChanges,\n} from '@ngrx/schematics/schematics-core';\n\nexport function migrateToCreators(): Rule {\n  return (host: Tree) =>\n    host.visit((path) => {\n      if (!path.endsWith('.ts')) {\n        return;\n      }\n\n      const sourceFile = ts.createSourceFile(\n        path,\n        host.read(path)!.toString(),\n        ts.ScriptTarget.Latest\n      );\n\n      if (sourceFile.isDeclarationFile) {\n        return;\n      }\n\n      const effectsPerClass = sourceFile.statements\n        .filter(ts.isClassDeclaration)\n        .map((clas) =>\n          clas.members\n            .filter(ts.isPropertyDeclaration)\n            .filter(\n              (property) =>\n                property.decorators &&\n                property.decorators.some(isEffectDecorator)\n            )\n        );\n\n      const effects = effectsPerClass.reduce(\n        (acc, effects) => acc.concat(effects),\n        []\n      );\n\n      const createEffectsChanges = replaceEffectDecorators(host, path, effects);\n      const importChanges = replaceImport(\n        sourceFile,\n        path,\n        '@ngrx/effects',\n        'Effect',\n        'createEffect'\n      );\n\n      return commitChanges(host, sourceFile.fileName, [\n        ...importChanges,\n        ...createEffectsChanges,\n      ]);\n    });\n}\n\nfunction replaceEffectDecorators(\n  host: Tree,\n  path: Path,\n  effects: ts.PropertyDeclaration[]\n) {\n  const inserts = effects\n    .filter((effect) => !!effect.initializer)\n    .map((effect) => {\n      const decorator = (effect.decorators || []).find(isEffectDecorator)!;\n      const effectArguments = getDispatchProperties(host, path, decorator);\n      const end = effectArguments ? `, ${effectArguments})` : ')';\n\n      return [\n        new InsertChange(path, effect.initializer!.pos, ' createEffect(() =>'),\n        new InsertChange(path, effect.initializer!.end, end),\n      ];\n    })\n    .reduce((acc, inserts) => acc.concat(inserts), []);\n\n  const removes = effects\n    .map((effect) => effect.decorators)\n    .filter((decorators) => decorators)\n    .map((decorators) => {\n      const effectDecorators = decorators!.filter(isEffectDecorator);\n      return effectDecorators.map((decorator) => {\n        return new RemoveChange(\n          path,\n          decorator.expression.pos - 1, // also get the @ sign\n          decorator.expression.end\n        );\n      });\n    })\n    .reduce((acc, removes) => acc.concat(removes), []);\n\n  return [...inserts, ...removes];\n}\n\nfunction isEffectDecorator(decorator: ts.Decorator) {\n  return (\n    ts.isCallExpression(decorator.expression) &&\n    ts.isIdentifier(decorator.expression.expression) &&\n    decorator.expression.expression.text === 'Effect'\n  );\n}\n\nfunction getDispatchProperties(\n  host: Tree,\n  path: Path,\n  decorator: ts.Decorator\n) {\n  if (!decorator.expression || !ts.isCallExpression(decorator.expression)) {\n    return '';\n  }\n\n  // just copy the effect properties\n  const content = host.read(path)!.toString('utf8');\n  const args = content\n    .substring(\n      decorator.expression.arguments.pos,\n      decorator.expression.arguments.end\n    )\n    .trim();\n  return args;\n}\n\nexport default function (): Rule {\n  return chain([migrateToCreators()]);\n}\n"]}