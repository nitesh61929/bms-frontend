{"version":3,"file":"devtools.d.ts","sources":["devtools.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ErrorHandler } from '@angular/core';\nimport { Action, ActionsSubject, ReducerObservable, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable, Observer } from 'rxjs';\nimport { StoreDevtoolsConfig } from './config';\nimport { DevtoolsExtension } from './extension';\nimport { LiftedState } from './reducer';\nimport { DevtoolsDispatcher } from './devtools-dispatcher';\nexport declare class StoreDevtools implements Observer<any> {\n    private stateSubscription;\n    private extensionStartSubscription;\n    dispatcher: ActionsSubject;\n    liftedState: Observable<LiftedState>;\n    state: Observable<any>;\n    constructor(dispatcher: DevtoolsDispatcher, actions$: ActionsSubject, reducers$: ReducerObservable, extension: DevtoolsExtension, scannedActions: ScannedActionsSubject, errorHandler: ErrorHandler, initialState: any, config: StoreDevtoolsConfig);\n    dispatch(action: Action): void;\n    next(action: any): void;\n    error(error: any): void;\n    complete(): void;\n    performAction(action: any): void;\n    refresh(): void;\n    reset(): void;\n    rollback(): void;\n    commit(): void;\n    sweep(): void;\n    toggleAction(id: number): void;\n    jumpToAction(actionId: number): void;\n    jumpToState(index: number): void;\n    importState(nextLiftedState: any): void;\n    lockChanges(status: boolean): void;\n    pauseRecording(status: boolean): void;\n}\n"]}