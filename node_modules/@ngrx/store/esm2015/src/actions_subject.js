/**
 * @fileoverview added by tsickle
 * Generated from: src/actions_subject.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
export const INIT = (/** @type {?} */ ('@ngrx/store/init'));
export class ActionsSubject extends BehaviorSubject {
    constructor() {
        super({ type: INIT });
    }
    /**
     * @param {?} action
     * @return {?}
     */
    next(action) {
        if (typeof action === 'function') {
            throw new TypeError(`
        Dispatch expected an object, instead it received a function.
        If you're using the createAction function, make sure to invoke the function
        before dispatching the action. For example, someAction should be someAction().`);
        }
        else if (typeof action === 'undefined') {
            throw new TypeError(`Actions must be objects`);
        }
        else if (typeof action.type === 'undefined') {
            throw new TypeError(`Actions must have a type property`);
        }
        super.next(action);
    }
    /**
     * @return {?}
     */
    complete() {
        /* noop */
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.complete();
    }
}
ActionsSubject.ɵfac = function ActionsSubject_Factory(t) { return new (t || ActionsSubject)(); };
ActionsSubject.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ActionsSubject, factory: ActionsSubject.ɵfac });
/** @nocollapse */
ActionsSubject.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionsSubject, [{
        type: Injectable
    }], function () { return []; }, null); })();
/** @type {?} */
export const ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uc19zdWJqZWN0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9tb2R1bGVzL3N0b3JlL3NyYy9hY3Rpb25zX3N1YmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDOztBQUdBLE1BQU0sT0FBTyxJQUFJLEdBQUcsbUJBQUEsa0JBQWtCLEVBQXNCO0FBRzVELE1BQU0sT0FBTyxjQUFlLFNBQVEsZUFBdUI7QUFDekQsSUFDQTtBQUNGLFFBQUksS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNOO0FBQW1CO0FBQVEsSUFEMUIsSUFBSSxDQUFDLE1BQWM7QUFBSSxRQUNyQixJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtBQUN0QyxZQUFNLE1BQU0sSUFBSSxTQUFTLENBQUM7QUFDMUI7QUFDQTtBQUNBLHVGQUF1RixDQUFDLENBQUM7QUFDekYsU0FBSztBQUFDLGFBQUssSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBTSxNQUFNLElBQUksU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDckQsU0FBSztBQUFDLGFBQUssSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO0FBQ25ELFlBQU0sTUFBTSxJQUFJLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQy9ELFNBQUs7QUFDTCxRQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNJO0FBRVgsSUFIRSxRQUFRO0FBQ1YsUUFBSSxVQUFVO0FBQ2QsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNDO0FBQVEsSUFEZCxXQUFXO0FBQ2IsUUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDckIsSUFBRSxDQUFDO0FBQ0g7MENBNUJDLFVBQVU7MEdBQ1Q7QUFBQztBQUFtQjs7O2dEQUNuQjtBQUFDO0FBNEJKLE1BQU0sT0FBTyx5QkFBeUIsR0FBZSxDQUFDLGNBQWMsQ0FBQztBQUNyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL21vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBJTklUID0gJ0BuZ3J4L3N0b3JlL2luaXQnIGFzICdAbmdyeC9zdG9yZS9pbml0JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjdGlvbnNTdWJqZWN0IGV4dGVuZHMgQmVoYXZpb3JTdWJqZWN0PEFjdGlvbj5cbiAgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7IHR5cGU6IElOSVQgfSk7XG4gIH1cblxuICBuZXh0KGFjdGlvbjogQWN0aW9uKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFxuICAgICAgICBEaXNwYXRjaCBleHBlY3RlZCBhbiBvYmplY3QsIGluc3RlYWQgaXQgcmVjZWl2ZWQgYSBmdW5jdGlvbi5cbiAgICAgICAgSWYgeW91J3JlIHVzaW5nIHRoZSBjcmVhdGVBY3Rpb24gZnVuY3Rpb24sIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGZ1bmN0aW9uXG4gICAgICAgIGJlZm9yZSBkaXNwYXRjaGluZyB0aGUgYWN0aW9uLiBGb3IgZXhhbXBsZSwgc29tZUFjdGlvbiBzaG91bGQgYmUgc29tZUFjdGlvbigpLmApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEFjdGlvbnMgbXVzdCBiZSBvYmplY3RzYCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBBY3Rpb25zIG11c3QgaGF2ZSBhIHR5cGUgcHJvcGVydHlgKTtcbiAgICB9XG4gICAgc3VwZXIubmV4dChhY3Rpb24pO1xuICB9XG5cbiAgY29tcGxldGUoKSB7XG4gICAgLyogbm9vcCAqL1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgc3VwZXIuY29tcGxldGUoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQUNUSU9OU19TVUJKRUNUX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtBY3Rpb25zU3ViamVjdF07XG4iXX0=