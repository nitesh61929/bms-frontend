{"version":3,"file":"mock_store.d.ts","sources":["mock_store.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { Action, ActionsSubject, ReducerManager, Store, MemoizedSelectorWithProps, MemoizedSelector } from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\ndeclare type OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any> ? MemoizedSelector<any, Result> : T extends MemoizedSelectorWithProps<any, any, any> ? MemoizedSelectorWithProps<any, any, Result> : never;\ndeclare type Memoized<Result> = MemoizedSelector<any, Result> | MemoizedSelectorWithProps<any, any, Result>;\nexport declare class MockStore<T = object> extends Store<T> {\n    private state$;\n    private initialState;\n    private readonly selectors;\n    readonly scannedActions$: Observable<Action>;\n    private lastState?;\n    constructor(state$: MockState<T>, actionsObserver: ActionsSubject, reducerManager: ReducerManager, initialState: T, mockSelectors?: MockSelector[]);\n    setState(nextState: T): void;\n    overrideSelector<Selector extends Memoized<Result>, Value extends Result, Result = Selector extends MemoizedSelector<any, infer T> ? T : Selector extends MemoizedSelectorWithProps<any, any, infer U> ? U : Value>(selector: Selector | string, value: Value): OnlyMemoized<typeof selector, Result>;\n    resetSelectors(): void;\n    select(selector: any, prop?: any): Observable<any>;\n    addReducer(): void;\n    removeReducer(): void;\n    /**\n     * Refreshes the existing state.\n     */\n    refreshState(): void;\n}\nexport {};\n"]}