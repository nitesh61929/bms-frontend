import { ESLintConfiguration } from "../input/findESLintConfiguration";
import { AllOriginalConfigurations, OriginalConfigurations } from "../input/findOriginalConfigurations";
import { PackagesConfiguration } from "../input/findPackagesConfiguration";
import { TSLintConfiguration } from "../input/findTSLintConfiguration";
import { TypeScriptConfiguration } from "../input/findTypeScriptConfiguration";
export declare type AllOriginalConfigurationsOptionally = {
    eslint?: Partial<OriginalConfigurations<ESLintConfiguration>>;
    packages?: PackagesConfiguration;
    tslint: Partial<OriginalConfigurations<TSLintConfiguration>>;
    typescript?: TypeScriptConfiguration;
};
/**
 * Creates a raw output ESLint configuration summary from input configuration values.
 *
 * @param originalConfigurations
 * Any input configuration objects, including 'raw' (exact configuration file contents)
 * and 'full' (tool-reported computed values) for both ESLint and TSLint.
 * @param prettier
 * Whether to always consider the output configuration as extending from the Prettier
 * ruleset, instead of inferring it from computed rule values (recommended).
 */
export declare const createESLintConfigurationStandalone: (originalConfigurations: AllOriginalConfigurations, prettier?: boolean | undefined) => Promise<import("../converters/lintConfigs/summarization/types").SummarizedConfigResultsConfiguration>;
