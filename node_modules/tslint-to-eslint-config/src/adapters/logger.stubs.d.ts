/// <reference types="jest" />
export declare const createStubLogger: () => {
    debugFileName: string;
    info: {
        writable: boolean;
        addListener: jest.Mock<any, any>;
        emit: jest.Mock<any, any>;
        end: jest.Mock<any, any>;
        eventNames: jest.Mock<any, any>;
        getMaxListeners: jest.Mock<any, any>;
        listenerCount: jest.Mock<any, any>;
        listeners: jest.Mock<any, any>;
        off: jest.Mock<any, any>;
        on: jest.Mock<any, any>;
        once: jest.Mock<any, any>;
        prependListener: jest.Mock<any, any>;
        prependOnceListener: jest.Mock<any, any>;
        rawListeners: jest.Mock<any, any>;
        removeAllListeners: jest.Mock<any, any>;
        removeListener: jest.Mock<any, any>;
        setMaxListeners: jest.Mock<any, any>;
        write: jest.Mock<any, any>;
    };
    stderr: {
        writable: boolean;
        addListener: jest.Mock<any, any>;
        emit: jest.Mock<any, any>;
        end: jest.Mock<any, any>;
        eventNames: jest.Mock<any, any>;
        getMaxListeners: jest.Mock<any, any>;
        listenerCount: jest.Mock<any, any>;
        listeners: jest.Mock<any, any>;
        off: jest.Mock<any, any>;
        on: jest.Mock<any, any>;
        once: jest.Mock<any, any>;
        prependListener: jest.Mock<any, any>;
        prependOnceListener: jest.Mock<any, any>;
        rawListeners: jest.Mock<any, any>;
        removeAllListeners: jest.Mock<any, any>;
        removeListener: jest.Mock<any, any>;
        setMaxListeners: jest.Mock<any, any>;
        write: jest.Mock<any, any>;
    };
    stdout: {
        writable: boolean;
        addListener: jest.Mock<any, any>;
        emit: jest.Mock<any, any>;
        end: jest.Mock<any, any>;
        eventNames: jest.Mock<any, any>;
        getMaxListeners: jest.Mock<any, any>;
        listenerCount: jest.Mock<any, any>;
        listeners: jest.Mock<any, any>;
        off: jest.Mock<any, any>;
        on: jest.Mock<any, any>;
        once: jest.Mock<any, any>;
        prependListener: jest.Mock<any, any>;
        prependOnceListener: jest.Mock<any, any>;
        rawListeners: jest.Mock<any, any>;
        removeAllListeners: jest.Mock<any, any>;
        removeListener: jest.Mock<any, any>;
        setMaxListeners: jest.Mock<any, any>;
        write: jest.Mock<any, any>;
    };
};
export declare const expectEqualWrites: (fn: jest.Mock, ...actual: string[]) => void;
