"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertVSCodeConfig = void 0;
const lodash_1 = require("lodash");
const path = __importStar(require("path"));
const utils_1 = require("../../../utils");
const knownMissingSettings = [
    "tslint.alwaysShowRuleFailuresAsWarnings",
    "tslint.exclude",
    "tslint.ignoreDefinitionFiles",
    "tslint.jsEnable",
    "tslint.suppressWhileTypeErrorsPresent",
];
const convertVSCodeConfig = (rawEditorSettings, settings) => {
    var _a;
    const editorSettings = utils_1.parseJson(rawEditorSettings);
    const autoFixOnSave = (_a = editorSettings["editor.codeActionsOnSave"]) === null || _a === void 0 ? void 0 : _a["source.fixAll.tslint"];
    // Only create a new config file path if the input and output configs roughly match
    const eslintPathMatches = editorSettings["tslint.configFile"] &&
        !path.relative(path.dirname(editorSettings["tslint.configFile"]), path.dirname(settings.config));
    const contents = JSON.stringify(lodash_1.merge({}, editorSettings, autoFixOnSave !== undefined && {
        "editor.codeActionsOnSave": {
            "eslint.autoFixOnSave": autoFixOnSave,
        },
    }, eslintPathMatches && {
        "eslint.options": {
            configFile: settings.config,
        },
    }), null, 4);
    const missing = knownMissingSettings.filter((setting) => editorSettings[setting]);
    return { contents, missing };
};
exports.convertVSCodeConfig = convertVSCodeConfig;
//# sourceMappingURL=convertVSCodeConfig.js.map