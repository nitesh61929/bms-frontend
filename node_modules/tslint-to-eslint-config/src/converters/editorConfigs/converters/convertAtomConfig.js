"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertAtomConfig = void 0;
const CsonParser = __importStar(require("cson-parser"));
const lodash_1 = require("lodash");
const knownMissingSettings = ["enableSemanticRules", "rulesDirectory"];
const convertAtomConfig = (rawEditorSettings) => {
    const editorSettings = CsonParser.parse(rawEditorSettings);
    const linterSettings = editorSettings["linter-tslint"];
    const useLocalTslint = linterSettings === null || linterSettings === void 0 ? void 0 : linterSettings.useLocalTslint;
    const contents = CsonParser.stringify(lodash_1.merge(editorSettings, useLocalTslint !== undefined && {
        "linter-eslint": {
            global: {
                ...{ useGlobalEslint: !useLocalTslint },
            },
        },
    }), null, 4);
    const missing = knownMissingSettings.filter((setting) => linterSettings === null || linterSettings === void 0 ? void 0 : linterSettings[setting]);
    return { contents, missing };
};
exports.convertAtomConfig = convertAtomConfig;
//# sourceMappingURL=convertAtomConfig.js.map