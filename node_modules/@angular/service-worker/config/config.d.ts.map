{"version":3,"file":"config.d.ts","sources":["config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Angular v11.1.2\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n\r\n/**\r\n * Configuration for a particular group of assets.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface AssetGroup {\r\n    name: string;\r\n    installMode?: 'prefetch' | 'lazy';\r\n    updateMode?: 'prefetch' | 'lazy';\r\n    resources: {\r\n        files?: Glob[];\r\n        urls?: Glob[];\r\n    };\r\n    cacheQueryOptions?: Pick<CacheQueryOptions, 'ignoreSearch'>;\r\n}\r\n\r\n/**\r\n * A top-level Angular Service Worker configuration object.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface Config {\r\n    appData?: {};\r\n    index: string;\r\n    assetGroups?: AssetGroup[];\r\n    dataGroups?: DataGroup[];\r\n    navigationUrls?: string[];\r\n    navigationRequestStrategy?: 'freshness' | 'performance';\r\n}\r\n\r\n/**\r\n * Configuration for a particular group of dynamic URLs.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface DataGroup {\r\n    name: string;\r\n    urls: Glob[];\r\n    version?: number;\r\n    cacheConfig: {\r\n        maxSize: number;\r\n        maxAge: Duration;\r\n        timeout?: Duration;\r\n        strategy?: 'freshness' | 'performance';\r\n    };\r\n    cacheQueryOptions?: Pick<CacheQueryOptions, 'ignoreSearch'>;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare type Duration = string;\r\n\r\n\r\n/**\r\n * An abstraction over a virtual file system used to enable testing and operation\r\n * of the config generator in different environments.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface Filesystem {\r\n    list(dir: string): Promise<string[]>;\r\n    read(file: string): Promise<string>;\r\n    hash(file: string): Promise<string>;\r\n    write(file: string, contents: string): Promise<void>;\r\n}\r\n\r\n/**\r\n * Consumes service worker configuration files and processes them into control files.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class Generator {\r\n    readonly fs: Filesystem;\r\n    private baseHref;\r\n    constructor(fs: Filesystem, baseHref: string);\r\n    process(config: Config): Promise<Object>;\r\n    private processAssetGroups;\r\n    private processDataGroups;\r\n}\r\n\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare type Glob = string;\r\n\r\nexport { }\r\n"]}