{"version":3,"sources":["webpack:///src/app/features/auth/auth-routing.module.ts","webpack:///src/app/features/auth/auth.component.ts","webpack:///src/app/features/auth/auth.component.html","webpack:///src/app/features/auth/auth.module.ts","webpack:///src/app/features/auth/components/forgot-password/forgot-password.component.ts","webpack:///src/app/features/auth/components/forgot-password/forgot-password.component.html","webpack:///src/app/features/auth/components/login-with-password/login-with-password.component.ts","webpack:///src/app/features/auth/components/login-with-password/login-with-password.component.html","webpack:///src/app/features/auth/components/login/index.ts","webpack:///src/app/features/auth/components/login/login.component.ts","webpack:///src/app/features/auth/components/login/login.component.html","webpack:///src/app/features/auth/components/register/register.component.ts","webpack:///src/app/features/auth/components/register/register.component.html","webpack:///src/app/features/auth/components/reset-password/reset-password.component.ts","webpack:///src/app/features/auth/components/reset-password/reset-password.component.html","webpack:///src/app/features/auth/components/sign-up-otp/sign-up-otp.component.ts","webpack:///src/app/features/auth/components/sign-up-otp/sign-up-otp.component.html","webpack:///src/app/features/auth/components/sign-up/sign-up.component.ts","webpack:///src/app/features/auth/components/sign-up/sign-up.component.html","webpack:///src/app/features/auth/containers/forgot-password/forgot-password-container.component.ts","webpack:///src/app/features/auth/containers/forgot-password/forgot-password-container.component.html","webpack:///src/app/features/auth/containers/login-with-password/login-with-password-container.component.ts","webpack:///src/app/features/auth/containers/login-with-password/login-with-password-container.component.html","webpack:///src/app/features/auth/containers/login/index.ts","webpack:///src/app/features/auth/containers/login/login-container.component.ts","webpack:///src/app/features/auth/containers/login/login-container.component.html","webpack:///src/app/features/auth/containers/register/index.ts","webpack:///src/app/features/auth/containers/register/register-container.component.ts","webpack:///src/app/features/auth/containers/register/register-container.component.html","webpack:///src/app/features/auth/containers/reset-password/reset-password-container.component.ts","webpack:///src/app/features/auth/containers/reset-password/reset-password-container.component.html","webpack:///src/app/features/auth/containers/sign-up-otp/sign-up-otp-container.component.ts","webpack:///src/app/features/auth/containers/sign-up-otp/sign-up-otp-container.component.html","webpack:///src/app/features/auth/containers/sign-up/sign-up-container.component.ts","webpack:///src/app/features/auth/containers/sign-up/sign-up-container.component.html","webpack:///src/app/features/auth/store/actions/auth.actions.ts","webpack:///src/app/features/auth/store/effects/auth.effects.ts","webpack:///src/app/features/auth/store/reducers/auth.reducer.ts"],"names":["routes","path","component","children","redirectTo","pathMatch","data","title","AuthRoutingModule","forChild","imports","exports","AuthComponent","selector","templateUrl","styleUrls","AuthModule","forFeature","declarations","ForgotPasswordComponent","requestOTP","setForgotPasswordForm","forgotPasswordForm","formBuilder","group","mobileNumber","required","valid","emit","value","LOGIN_WITH_PASSWORD","onRequestOTP","goToLoginScreen","LoginWithPasswordComponent","loginWithPassword","setLoginWithPasswordForm","loginWithPasswordForm","password","FORGOT_PASSWORD","REGISTRATION_PAGE","onLoginWithPassword","onForgotPassword","goToRegister","LoginComponent","loginWithOTP","otpLogin","setLoginWithOTPForm","loginForm","otpToken","minLength","maxLength","onSubmitLoginForm","RegisterComponent","registerMobileNumber","buildRegistrationForm","error$","subscribe","err","registrationForm","errorMessageService","handleServerSideError","inputLengthValidator","onGenerateOTP","ResetPasswordComponent","resetPassword","setResetPasswordForm","resetPasswordForm","otp","newPassword","newPasswordConfirm","validator","checkPassword","onResetPassword","SignUpOtpComponent","activatedRoute","verifyOTP","snapshot","paramMap","get","setSignUpOTPForm","signUpOTPForm","onSubmit","SignUpComponent","verifyMobileNumber","setSignUpForm","signUpForm","invitationCode","ForgotPasswordContainerComponent","authService","mobilePayload","generateOTPForForgotPassword","res","snackBar","open","getTranslatedString","RESET_PASSWORD","LoginWithPasswordContainerComponent","userService","loginWithPasswordPayload","LoginContainerComponent","store","loginWithOtpPayload","dispatch","payload","onLoginWithOTP","RegisterContainerComponent","verifyMobileNumberSuccess$","destroyed$","pipe","d","LOGIN_PAGE","select","auth","error","registerMobileNumberPayload","registerPayload","onRegisterMobileNumber","ResetPasswordContainerComponent","resetPasswordPayload","resetPasswordCmp","SignUpOtpContainerComponent","verifyOtpPayload","onVerifyOTP","SignUpContainerComponent","SIGN_UP_OTP","mobileNumberPayload","getInvitationId","queryParams","params","invitationId","verifyInvitation","INVALID_LINK","verifyMobileNumberPayload","verifyMobileNumberSuccess","verifyMobileNumberFailure","verifyOTPSuccess","verifyOTPFailure","verifyInvitationSuccess","verifyInvitationFailure","registerMobileNumberSuccess","registerMobileNumberFailure","loginWithOTPSuccess","loginWithOTPFailure","AuthEffects","actions$","router","translate","verifyMobileNumber$","action","response","instant","verifyOTP$","verifyOtp","navigateByUrl","ON_BOARD_OWNER_TYPE","verifyInvitation$","registerMobileNumber$","loginWithOTP$","loginWithOtp","authFeatureKey","initialState","loading","message","authReducer","state"],"mappings":"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","file":"features-auth-auth-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { AuthComponent } from \"./auth.component\";\nimport { ForgotPasswordContainerComponent } from \"./containers/forgot-password/forgot-password-container.component\";\nimport { LoginContainerComponent } from \"./containers/login\";\nimport { LoginWithPasswordContainerComponent } from \"./containers/login-with-password/login-with-password-container.component\";\nimport { RegisterContainerComponent } from \"./containers/register\";\nimport { ResetPasswordContainerComponent } from \"./containers/reset-password/reset-password-container.component\";\nimport { SignUpOtpContainerComponent } from \"./containers/sign-up-otp/sign-up-otp-container.component\";\nimport { SignUpContainerComponent } from \"./containers/sign-up/sign-up-container.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: AuthComponent,\n    children: [\n      {\n        path: \"\",\n        redirectTo: \"register\",\n        pathMatch: \"full\",\n      },\n      {\n        path: \"login\",\n        component: LoginContainerComponent,\n        data: {\n          title: \"browser_titles.login\",\n        },\n      },\n      {\n        path: \"register\",\n        component: RegisterContainerComponent,\n        data: {\n          title: \"browser_titles.register\",\n        },\n      },\n      {\n        path: \"password-login\",\n        component: LoginWithPasswordContainerComponent,\n        data: {\n          title: \"browser_titles.password_login\",\n        },\n      },\n      {\n        path: \"forgot-password\",\n        component: ForgotPasswordContainerComponent,\n        data: {\n          title: \"browser_titles.forgot_password\",\n        },\n      },\n      {\n        path: \"reset-password\",\n        component: ResetPasswordContainerComponent,\n        data: {\n          title: \"browser_titles.reset_password\",\n        },\n      },\n      {\n        path: \"sign-up\",\n        component: SignUpContainerComponent,\n        // data: {\n        //   title: \"browser_titles.reset_password\",\n        // },\n      },\n      {\n        path: \"sign-up-otp/:mobileNumber\",\n        component: SignUpOtpContainerComponent,\n        // data: {\n        //   title: \"browser_titles.reset_password\",\n        // },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-auth\",\n  templateUrl: \"./auth.component.html\",\n  styleUrls: [\"./auth.component.scss\"],\n})\nexport class AuthComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from \"@angular/core\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { SharedModule } from \"@shared/shared.module\";\nimport { AuthRoutingModule } from \"./auth-routing.module\";\nimport { AuthComponent } from \"./auth.component\";\nimport { ForgotPasswordComponent } from \"./components/forgot-password/forgot-password.component\";\nimport { LoginComponent } from \"./components/login\";\nimport { LoginWithPasswordComponent } from \"./components/login-with-password/login-with-password.component\";\nimport { RegisterComponent } from \"./components/register/register.component\";\nimport { ResetPasswordComponent } from \"./components/reset-password/reset-password.component\";\nimport { SignUpOtpComponent } from \"./components/sign-up-otp/sign-up-otp.component\";\nimport { SignUpComponent } from \"./components/sign-up/sign-up.component\";\nimport { ForgotPasswordContainerComponent } from \"./containers/forgot-password/forgot-password-container.component\";\nimport { LoginContainerComponent } from \"./containers/login\";\nimport { LoginWithPasswordContainerComponent } from \"./containers/login-with-password/login-with-password-container.component\";\nimport { RegisterContainerComponent } from \"./containers/register\";\nimport { ResetPasswordContainerComponent } from \"./containers/reset-password/reset-password-container.component\";\nimport { SignUpOtpContainerComponent } from \"./containers/sign-up-otp/sign-up-otp-container.component\";\nimport { SignUpContainerComponent } from \"./containers/sign-up/sign-up-container.component\";\nimport { AuthEffects } from \"./store/effects/auth.effects\";\nimport { authReducer } from \"./store/reducers/auth.reducer\";\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    LoginContainerComponent,\n    AuthComponent,\n    RegisterComponent,\n    RegisterContainerComponent,\n    LoginWithPasswordContainerComponent,\n    LoginWithPasswordComponent,\n    ForgotPasswordComponent,\n    ForgotPasswordContainerComponent,\n    ResetPasswordContainerComponent,\n    ResetPasswordComponent,\n    SignUpContainerComponent,\n    SignUpComponent,\n    SignUpOtpContainerComponent,\n    SignUpOtpComponent,\n  ],\n  imports: [\n    SharedModule,\n    AuthRoutingModule,\n    TranslateModule,\n    StoreModule.forFeature(\"auth\", authReducer),\n    EffectsModule.forFeature([AuthEffects]),\n  ],\n})\nexport class AuthModule {\n  constructor() {}\n}\n","import { Component, EventEmitter, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { BaseComponent } from \"@core/components\";\nimport { AppRoutes } from \"@core/enums\";\nimport { CustomValidators } from \"@core/utilities\";\n\n@Component({\n  selector: \"app-forgot-password\",\n  templateUrl: \"./forgot-password.component.html\",\n})\nexport class ForgotPasswordComponent extends BaseComponent implements OnInit {\n  @Output() requestOTP: EventEmitter<any> = new EventEmitter<any>();\n  forgotPasswordForm: FormGroup;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.setForgotPasswordForm();\n  }\n\n  private setForgotPasswordForm() {\n    this.forgotPasswordForm = this.formBuilder.group({\n      mobileNumber: [\"\", [Validators.required, CustomValidators.mobileNumber()]],\n    });\n  }\n\n  onRequestOTP() {\n    if (this.forgotPasswordForm.valid) {\n      this.requestOTP.emit(this.forgotPasswordForm.value);\n    }\n  }\n\n  goToLoginScreen() {\n    this.redirectTo(AppRoutes.LOGIN_WITH_PASSWORD);\n  }\n}\n","<div class=\"auth-form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <div class=\"container\" fxFlex=\"1 1 400px\" fxFlex.xs=\" 1 1 100%\">\n    <figure>\n      <mat-icon>settings_cell</mat-icon>\n    </figure>\n    <h4 class=\"text-center fs-24\">Forgot Password</h4>\n    <p class=\"fs-14 text-center help-text\">Enter your mobile number to generate OTP</p>\n    <mat-card>\n      <form class=\"auth-form form-fw\" (submit)=\"onRequestOTP()\" [formGroup]=\"forgotPasswordForm\">\n        <div class=\"form-field-wrapper\">\n          <mat-icon>phone_iphone</mat-icon>\n          <mat-form-field>\n            <mat-label>{{ \"mobile\" | translate }}</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              [placeholder]=\"'placeholders.mobile' | translate\"\n              formControlName=\"mobileNumber\"\n            />\n            <mat-error>\n              <app-error-message [control]=\"forgotPasswordForm.get('mobileNumber')\"></app-error-message>\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <button mat-button color=\"primary\" class=\"btn-primary\">\n          {{ \"common.generate_otp\" | translate }}\n        </button>\n\n        <a class=\"fs-14 text-gray text-center text-link\" (click)=\"goToLoginScreen()\">\n          {{ \"back_to_login\" | translate }}\n        </a>\n        <!-- <a (click)=\"goToLoginWithPasswordPage()\" class=\"fs-14 text-primary text-center text-link\">\n          {{ \"login_with_password\" | translate }}\n        </a> -->\n      </form>\n    </mat-card>\n    <p class=\"text-center small-text fs-14\">\n      &copy;\n      <span class=\"text-uppercase\">\n        {{ \"login.building_management\" | translate }}\n      </span>\n    </p>\n  </div>\n</div>\n","import { Component, EventEmitter, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { BaseComponent } from \"@core/components\";\nimport { AppRoutes } from \"@core/enums\";\nimport { CustomValidators } from \"@core/utilities\";\nimport { ILoginWithPasswordPayload } from \"../../../../core/interfaces/login-with-password-payload\";\n\n@Component({\n  selector: \"app-login-with-password\",\n  templateUrl: \"./login-with-password.component.html\",\n})\nexport class LoginWithPasswordComponent extends BaseComponent implements OnInit {\n  @Output() loginWithPassword: EventEmitter<ILoginWithPasswordPayload> = new EventEmitter<ILoginWithPasswordPayload>();\n  // @Output() forgotPassword: EventEmitter<any> = new EventEmitter<any>();\n  loginWithPasswordForm: FormGroup;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.setLoginWithPasswordForm();\n  }\n\n  private setLoginWithPasswordForm() {\n    this.loginWithPasswordForm = this.formBuilder.group({\n      mobileNumber: [\"\", [Validators.required, CustomValidators.mobileNumber()]],\n      password: [\"\", Validators.required],\n    });\n  }\n\n  onLoginWithPassword() {\n    if (this.loginWithPasswordForm.valid) {\n      this.loginWithPassword.emit(this.loginWithPasswordForm.value);\n    }\n  }\n\n  onForgotPassword() {\n    this.redirectTo(AppRoutes.FORGOT_PASSWORD);\n  }\n\n  goToRegister() {\n    this.redirectTo(AppRoutes.REGISTRATION_PAGE);\n  }\n}\n","<div class=\"auth-form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <div class=\"container\" fxFlex=\"1 1 400px\" fxFlex.xs=\" 1 1 100%\">\n    <figure>\n      <mat-icon>settings_cell</mat-icon>\n    </figure>\n    <h4 class=\"text-center fs-24\">Login</h4>\n    <p class=\"fs-14 text-center help-text\">Login with password</p>\n    <mat-card>\n      <form class=\"auth-form form-fw\" (submit)=\"onLoginWithPassword()\" [formGroup]=\"loginWithPasswordForm\">\n        <div class=\"form-field-wrapper\">\n          <mat-icon>phone_iphone</mat-icon>\n          <mat-form-field>\n            <mat-label>{{ \"mobile\" | translate }}</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              [placeholder]=\"'placeholders.mobile' | translate\"\n              formControlName=\"mobileNumber\"\n            />\n            <mat-error>\n              <app-error-message [control]=\"loginWithPasswordForm.get('mobileNumber')\"></app-error-message>\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <div class=\"form-field-wrapper is-pwd-field\">\n          <mat-icon>vpn_key</mat-icon>\n          <mat-form-field>\n            <mat-label>{{ \"common.password\" | translate }}</mat-label>\n            <input\n              matInput\n              type=\"password\"\n              [placeholder]=\"'placeholders.password' | translate\"\n              formControlName=\"password\"\n            />\n            <mat-error>\n              <app-error-message [control]=\"loginWithPasswordForm.get('password')\"></app-error-message>\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <button mat-button color=\"primary\" class=\"btn-primary\">\n          {{ \"common.login\" | translate }}\n        </button>\n\n        <a (click)=\"onForgotPassword()\" class=\"fs-14 text-gray text-center text-link\">\n          {{ \"forgot_password\" | translate }}\n        </a>\n        <a (click)=\"goToRegister()\" class=\"fs-14 text-gray text-center text-link\">\n          {{ \"login_with_otp\" | translate }}\n        </a>\n      </form>\n    </mat-card>\n    <p class=\"text-center small-text fs-14\">\n      &copy;\n      <span class=\"text-uppercase\">\n        {{ \"login.building_management\" | translate }}\n      </span>\n    </p>\n  </div>\n</div>\n","export * from \"./login.component\";\n","import { Component, EventEmitter, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { BaseComponent } from \"@core/components\";\nimport { ILoginWithOTPPayload } from \"@core/interfaces/login-with-otp-payload\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n})\nexport class LoginComponent extends BaseComponent implements OnInit {\n  @Output() loginWithOTP: EventEmitter<ILoginWithOTPPayload> = new EventEmitter<ILoginWithOTPPayload>();\n\n  loginForm: FormGroup;\n  otpLogin: boolean;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.otpLogin = true;\n    this.setLoginWithOTPForm();\n  }\n\n  onSubmitLoginForm(): void {\n    if (this.loginForm.valid) {\n      this.loginWithOTP.emit(this.loginForm.value);\n    }\n  }\n\n  private setLoginWithOTPForm() {\n    this.loginForm = this.formBuilder.group({\n      otpLogin: [this.otpLogin],\n      otpToken: [\"\", [Validators.required, Validators.minLength(6), Validators.maxLength(6)]],\n    });\n  }\n}\n","<app-login-section>\n  <h4 class=\"text-center\">Enter your OTP to Login</h4>\n  <form class=\"login-form\" [formGroup]=\"loginForm\">\n    <div class=\"form-field-wrapper\">\n      <i class=\"las la-mobile\"></i>\n      <mat-form-field>\n        <mat-label> OTP</mat-label>\n        <input type=\"text\" matInput formControlName=\"otpToken\" appOnlyNumber />\n        <mat-error>\n          <app-error-message [control]=\"loginForm.get('otpToken')\"></app-error-message>\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div class=\"buttons-wrapper\">\n      <button mat-button class=\"btn-theme-green\" (click)=\"onSubmitLoginForm()\">Submit</button>\n    </div>\n  </form>\n</app-login-section>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { BaseComponent } from \"@core/components/base.component\";\nimport { IRegisterMobileNumberPayload } from \"@core/interfaces/register-mobile-number-payload\";\nimport { CustomValidators } from \"@core/utilities\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-register\",\n  templateUrl: \"./register.component.html\",\n})\nexport class RegisterComponent extends BaseComponent implements OnInit {\n  @Output() registerMobileNumber: EventEmitter<IRegisterMobileNumberPayload> = new EventEmitter<\n    IRegisterMobileNumberPayload\n  >();\n  @Input() error$: Observable<Error>;\n\n  registrationForm: FormGroup;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.buildRegistrationForm();\n    this.error$.subscribe((err) => {\n      if (err && this.registrationForm) {\n        this.errorMessageService.handleServerSideError(this.registrationForm, err);\n      }\n    });\n  }\n\n  private buildRegistrationForm(): void {\n    this.registrationForm = this.formBuilder.group({\n      mobileNumber: [\"\", [Validators.required, CustomValidators.inputLengthValidator(10)]],\n    });\n  }\n\n  onGenerateOTP() {\n    if (this.registrationForm.valid) {\n      this.registerMobileNumber.emit(this.registrationForm.value);\n    }\n  }\n}\n","<app-login-section>\n  <h4 class=\"text-center\">Enter your mobile number to receive OTP</h4>\n  <form class=\"login-form\" [formGroup]=\"registrationForm\">\n    <div class=\"form-field-wrapper\">\n      <i class=\"las la-mobile\"></i>\n      <mat-form-field>\n        <mat-label> Mobile Number </mat-label>\n        <input type=\"text\" matInput formControlName=\"mobileNumber\" appOnlyNumber />\n        <mat-error>\n          <app-error-message [control]=\"registrationForm.get('mobileNumber')\"></app-error-message>\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div class=\"buttons-wrapper\">\n      <button mat-button class=\"btn-theme-green\" (click)=\"onGenerateOTP()\">Generate OTP</button>\n    </div>\n  </form>\n</app-login-section>\n","import { Component, EventEmitter, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { BaseComponent } from \"@core/components\";\nimport { AppRoutes } from \"@core/enums\";\nimport { CustomValidators } from \"@core/utilities\";\nimport { IResetPassword } from \"./../../../../core/interfaces/reset-password\";\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"./reset-password.component.html\",\n})\nexport class ResetPasswordComponent extends BaseComponent implements OnInit {\n  @Output() resetPassword: EventEmitter<IResetPassword> = new EventEmitter<IResetPassword>();\n  resetPasswordForm: FormGroup;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.setResetPasswordForm();\n  }\n\n  setResetPasswordForm() {\n    this.resetPasswordForm = this.formBuilder.group(\n      {\n        otp: [\"\", [Validators.required, CustomValidators.inputLengthValidator(6)]],\n        newPassword: [\"\", [Validators.required, Validators.minLength(6), Validators.maxLength(15)]],\n        newPasswordConfirm: [\"\", [Validators.required]],\n      },\n      {\n        validator: CustomValidators.checkPassword(\"newPassword\", \"newPasswordConfirm\"),\n      }\n    );\n  }\n\n  onResetPassword() {\n    if (this.resetPasswordForm.valid) {\n      this.resetPassword.emit(this.resetPasswordForm.value);\n    }\n  }\n\n  goToLoginScreen() {\n    this.redirectTo(AppRoutes.LOGIN_WITH_PASSWORD);\n  }\n}\n","<div class=\"auth-form-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <div class=\"container\" fxFlex=\"1 1 400px\" fxFlex.xs=\" 1 1 100%\">\n    <figure>\n      <mat-icon>vpn_key</mat-icon>\n    </figure>\n    <h4 class=\"text-center fs-24\">Reset Password</h4>\n    <mat-card>\n      <form class=\"auth-form form-fw\" (submit)=\"onResetPassword()\" [formGroup]=\"resetPasswordForm\">\n        <div class=\"form-field-wrapper\">\n          <mat-icon>settings_cell</mat-icon>\n          <mat-form-field>\n            <mat-label>{{ \"common.otp\" | translate }}</mat-label>\n            <input matInput type=\"number\" [placeholder]=\"'placeholders.otp' | translate\" formControlName=\"otp\" />\n            <mat-error>\n              <app-error-message [control]=\"resetPasswordForm.get('otp')\"></app-error-message>\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <div class=\"form-field-wrapper is-pwd-field\">\n          <mat-icon>vpn_key</mat-icon>\n          <mat-form-field>\n            <mat-label>{{ \"common.password\" | translate }}</mat-label>\n            <input\n              matInput\n              type=\"password\"\n              [placeholder]=\"'placeholders.password' | translate\"\n              formControlName=\"newPassword\"\n            />\n            <mat-error>\n              <app-error-message [control]=\"resetPasswordForm.get('newPassword')\"></app-error-message>\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <div class=\"form-field-wrapper is-pwd-field\">\n          <mat-icon>vpn_key</mat-icon>\n          <mat-form-field>\n            <mat-label>{{ \"common.confirm_password\" | translate }}</mat-label>\n            <input\n              matInput\n              type=\"password\"\n              [placeholder]=\"'placeholders.password' | translate\"\n              formControlName=\"newPasswordConfirm\"\n            />\n            <mat-error>\n              <app-error-message [control]=\"resetPasswordForm.get('newPasswordConfirm')\"></app-error-message>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-error *ngIf=\"resetPasswordForm.errors?.compare_password\" class=\"compare-error pwd-compare\">\n            {{ \"passwords_match\" | translate }}\n          </mat-error>\n        </div>\n\n        <button mat-button color=\"primary\" class=\"btn-primary\">\n          {{ \"reset_password\" | translate }}\n        </button>\n\n        <a class=\"fs-14 text-gray text-center text-link\" (click)=\"goToLoginScreen()\">\n          {{ \"back_to_login\" | translate }}\n        </a>\n      </form>\n    </mat-card>\n    <p class=\"text-center small-text fs-14\">\n      &copy;\n      <span class=\"text-uppercase\">\n        {{ \"login.building_management\" | translate }}\n      </span>\n    </p>\n  </div>\n</div>\n","import { Component, EventEmitter, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BaseComponent } from \"@core/components\";\nimport { IVerifyOTPPayload } from \"./../../../../core/interfaces/verify-otp-payload\";\n\n@Component({\n  selector: \"app-sign-up-otp\",\n  templateUrl: \"./sign-up-otp.component.html\",\n  styleUrls: [\"./sign-up-otp.component.scss\"],\n})\nexport class SignUpOtpComponent extends BaseComponent implements OnInit {\n  @Output() verifyOTP: EventEmitter<IVerifyOTPPayload> = new EventEmitter<IVerifyOTPPayload>();\n  signUpOTPForm: FormGroup;\n  mobileNumber: string;\n\n  constructor(private activatedRoute: ActivatedRoute) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.mobileNumber = this.activatedRoute.snapshot.paramMap.get(\"mobileNumber\");\n    if (this.mobileNumber) {\n      this.setSignUpOTPForm();\n    }\n  }\n\n  private setSignUpOTPForm() {\n    this.signUpOTPForm = this.formBuilder.group({\n      mobileNumber: [this.mobileNumber],\n      otpToken: [\"\", [Validators.required]],\n    });\n  }\n\n  onSubmit() {\n    if (this.signUpOTPForm.valid) {\n      this.verifyOTP.emit(this.signUpOTPForm.value);\n    }\n  }\n}\n","<app-auth-section>\n  <h4 class=\"text-center\">Enter your OTP to Login</h4>\n  <form class=\"login-form\" [formGroup]=\"signUpOTPForm\">\n    <div class=\"form-field-wrapper\">\n      <i class=\"las la-mobile\"></i>\n      <mat-form-field>\n        <mat-label> OTP</mat-label>\n        <input type=\"text\" matInput formControlName=\"otpToken\" appOnlyNumber />\n        <mat-error>\n          <app-error-message [control]=\"signUpOTPForm.get('otpToken')\"></app-error-message>\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div class=\"buttons-wrapper\">\n      <button mat-button class=\"btn-theme-green\" (click)=\"onSubmit()\">Submit</button>\n    </div>\n  </form>\n</app-auth-section>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, Validators } from \"@angular/forms\";\nimport { BaseComponent } from \"@core/components\";\nimport { CustomValidators } from \"@core/utilities\";\nimport { IVerifyMobileNumberPayload } from \"./../../../../core/interfaces/verify-mobile-number-payload\";\n\n@Component({\n  selector: \"app-sign-up\",\n  templateUrl: \"./sign-up.component.html\",\n  styleUrls: [\"./sign-up.component.scss\"],\n})\nexport class SignUpComponent extends BaseComponent implements OnInit {\n  @Output() verifyMobileNumber: EventEmitter<IVerifyMobileNumberPayload> = new EventEmitter<\n    IVerifyMobileNumberPayload\n  >();\n  @Input() invitationCode: string;\n  signUpForm: FormGroup;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.setSignUpForm();\n  }\n\n  private setSignUpForm() {\n    this.signUpForm = this.formBuilder.group({\n      mobileNumber: [\"\", [Validators.required, CustomValidators.inputLengthValidator(10)]],\n      invitationCode: [this.invitationCode],\n    });\n  }\n\n  onGenerateOTP() {\n    if (this.signUpForm.valid) {\n      this.verifyMobileNumber.emit(this.signUpForm.value);\n    }\n  }\n}\n","<app-auth-section>\n  <h4 class=\"text-center\">Enter your mobile number to receive OTP</h4>\n  <form class=\"login-form\" [formGroup]=\"signUpForm\">\n    <div class=\"form-field-wrapper\">\n      <i class=\"las la-mobile\"></i>\n      <mat-form-field>\n        <mat-label> Mobile Number </mat-label>\n        <input type=\"text\" matInput formControlName=\"mobileNumber\" appOnlyNumber />\n        <mat-error>\n          <app-error-message [control]=\"signUpForm.get('mobileNumber')\"></app-error-message>\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div class=\"buttons-wrapper\">\n      <button mat-button class=\"btn-theme-green\" (click)=\"onGenerateOTP()\">Generate OTP</button>\n    </div>\n  </form>\n</app-auth-section>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BaseComponent } from \"@core/components\";\nimport { AppRoutes } from \"@core/enums\";\nimport { AuthService } from \"@core/services\";\nimport { IMobilePayload } from \"./../../../../core/interfaces/mobile-payload\";\n\n@Component({\n  selector: \"app-forgot-password-container\",\n  templateUrl: \"./forgot-password-container.component.html\",\n})\nexport class ForgotPasswordContainerComponent extends BaseComponent implements OnInit {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  onRequestOTP(mobilePayload: IMobilePayload) {\n    this.authService.generateOTPForForgotPassword(mobilePayload).subscribe(\n      (res: any) => {\n        this.snackBar.open(this.getTranslatedString(\"snackbar_messages.otp_sent\"));\n        this.redirectTo(AppRoutes.RESET_PASSWORD);\n      },\n      (err) => {}\n    );\n  }\n}\n","<app-forgot-password (requestOTP)=\"onRequestOTP($event)\"></app-forgot-password>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BaseComponent } from \"@core/components\";\nimport { AuthService } from \"@core/services\";\nimport { UsersService } from \"@shared/services\";\nimport { ILoginWithPasswordPayload } from \"../../../../core/interfaces/login-with-password-payload\";\n\n@Component({\n  selector: \"app-login-with-password-container\",\n  templateUrl: \"./login-with-password-container.component.html\",\n})\nexport class LoginWithPasswordContainerComponent extends BaseComponent implements OnInit {\n  constructor(private authService: AuthService, private userService: UsersService) {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  onLoginWithPassword(loginWithPasswordPayload: ILoginWithPasswordPayload) {\n    this.authService.loginWithPassword(loginWithPasswordPayload).subscribe(\n      (res: any) => {},\n      (err) => {}\n    );\n  }\n}\n","<app-login-with-password (loginWithPassword)=\"onLoginWithPassword($event)\"></app-login-with-password>\n","export * from \"./login-container.component\";\n","import { Component, OnInit } from \"@angular/core\";\nimport { BaseComponent } from \"@core/components/base.component\";\nimport { ILoginWithOTPPayload } from \"@core/interfaces/login-with-otp-payload\";\nimport { Store } from \"@ngrx/store\";\nimport { loginWithOTP } from \"../../store/actions/auth.actions\";\n\n@Component({\n  selector: \"app-login-container\",\n  templateUrl: \"./login-container.component.html\",\n})\nexport class LoginContainerComponent extends BaseComponent implements OnInit {\n  constructor(private store: Store<any>) {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  onLoginWithOTP(loginWithOtpPayload: ILoginWithOTPPayload) {\n    this.store.dispatch(loginWithOTP({ payload: loginWithOtpPayload }));\n  }\n}\n","<app-login (loginWithOTP)=\"onLoginWithOTP($event)\"></app-login>\n","export * from \"./register-container.component\";\n","import { Component, OnInit } from \"@angular/core\";\nimport { BaseComponent } from \"@core/components/base.component\";\nimport { AppRoutes } from \"@core/enums\";\nimport { IRegisterMobileNumberPayload } from \"@core/interfaces/register-mobile-number-payload\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { Store } from \"@ngrx/store\";\nimport { Observable, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { registerMobileNumber, registerMobileNumberSuccess } from \"../../store/actions/auth.actions\";\n\n@Component({\n  selector: \"app-register-container\",\n  templateUrl: \"./register-container.component.html\",\n})\nexport class RegisterContainerComponent extends BaseComponent implements OnInit {\n  destroyed$ = new Subject<boolean>();\n  registerPayload: IRegisterMobileNumberPayload;\n  error$: Observable<Error>;\n\n  constructor(private store: Store<any>, verifyMobileNumberSuccess$: Actions) {\n    super();\n    verifyMobileNumberSuccess$\n      .pipe(ofType(registerMobileNumberSuccess(null)), takeUntil(this.destroyed$))\n      .subscribe((d) => {\n        this.redirectTo(`${AppRoutes.LOGIN_PAGE}`);\n      });\n  }\n\n  ngOnInit(): void {\n    this.error$ = this.store.select((store) => store.auth.error);\n  }\n\n  onRegisterMobileNumber(registerMobileNumberPayload: IRegisterMobileNumberPayload) {\n    this.registerPayload = registerMobileNumberPayload;\n    this.store.dispatch(registerMobileNumber({ payload: registerMobileNumberPayload }));\n  }\n}\n","<app-register (registerMobileNumber)=\"onRegisterMobileNumber($event)\" [error$]=\"error$\"></app-register>\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { BaseComponent } from \"@core/components\";\nimport { AppRoutes } from \"@core/enums\";\nimport { AuthService } from \"@core/services\";\nimport { IResetPassword } from \"./../../../../core/interfaces/reset-password\";\nimport { ResetPasswordComponent } from \"./../../components/reset-password/reset-password.component\";\n\n@Component({\n  selector: \"app-reset-password-container\",\n  templateUrl: \"./reset-password-container.component.html\",\n})\nexport class ResetPasswordContainerComponent extends BaseComponent implements OnInit {\n  @ViewChild(\"resetPasswordCmp\") resetPasswordCmp: ResetPasswordComponent;\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  onResetPassword(resetPasswordPayload: IResetPassword) {\n    this.authService.resetPassword(resetPasswordPayload).subscribe(\n      (res: any) => {\n        this.snackBar.open(this.getTranslatedString(\"change_password_success\"));\n        this.redirectTo(AppRoutes.LOGIN_WITH_PASSWORD);\n      },\n      (err) => {\n        if (err && this.resetPasswordCmp.resetPasswordForm) {\n          this.errorMessageService.handleServerSideError(this.resetPasswordCmp.resetPasswordForm, err);\n        }\n      }\n    );\n  }\n}\n","<app-reset-password #resetPasswordCmp (resetPassword)=\"onResetPassword($event)\"></app-reset-password>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { verifyOTP } from \"../../store/actions/auth.actions\";\nimport { IVerifyOTPPayload } from \"./../../../../core/interfaces/verify-otp-payload\";\n\n@Component({\n  selector: \"app-sign-up-otp-container\",\n  templateUrl: \"./sign-up-otp-container.component.html\",\n  styleUrls: [\"./sign-up-otp-container.component.scss\"],\n})\nexport class SignUpOtpContainerComponent implements OnInit {\n  constructor(private store: Store<any>) {}\n\n  ngOnInit(): void {}\n\n  onVerifyOTP(verifyOtpPayload: IVerifyOTPPayload) {\n    this.store.dispatch(verifyOTP({ payload: verifyOtpPayload }));\n  }\n}\n","<app-sign-up-otp (verifyOTP)=\"onVerifyOTP($event)\"></app-sign-up-otp>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BaseComponent } from \"@core/components\";\nimport { AppRoutes } from \"@core/enums\";\nimport { IVerifyMobileNumberPayload } from \"@core/interfaces/verify-mobile-number-payload\";\nimport { AuthService } from \"@core/services\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { Store } from \"@ngrx/store\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { verifyMobileNumber, verifyMobileNumberSuccess } from \"../../store/actions/auth.actions\";\n\n@Component({\n  selector: \"app-sign-up-container\",\n  templateUrl: \"./sign-up-container.component.html\",\n  styleUrls: [\"./sign-up-container.component.scss\"],\n})\nexport class SignUpContainerComponent extends BaseComponent implements OnInit {\n  invitationId: string;\n  invitationCode: string;\n  destroyed$ = new Subject<boolean>();\n  mobileNumberPayload: IVerifyMobileNumberPayload;\n\n  constructor(\n    private store: Store<any>,\n    private activatedRoute: ActivatedRoute,\n    private authService: AuthService,\n    verifyMobileNumberSuccess$: Actions\n  ) {\n    super();\n    verifyMobileNumberSuccess$\n      .pipe(ofType(verifyMobileNumberSuccess(null)), takeUntil(this.destroyed$))\n      .subscribe((d) => {\n        this.redirectTo(`${AppRoutes.SIGN_UP_OTP}/${this.mobileNumberPayload.mobileNumber}`);\n      });\n  }\n\n  ngOnInit(): void {\n    this.getInvitationId();\n  }\n\n  private getInvitationId() {\n    this.activatedRoute.queryParams.subscribe((params) => {\n      this.invitationId = params.invitationId;\n      this.verifyInvitation();\n    });\n  }\n\n  verifyInvitation() {\n    this.authService.verifyInvitation(this.invitationId).subscribe(\n      (d: any) => {\n        this.invitationCode = d.data.invitationCode;\n      },\n      (err) => {\n        this.redirectTo(AppRoutes.INVALID_LINK);\n      }\n    );\n  }\n\n  onVerifyMobileNumber(verifyMobileNumberPayload: IVerifyMobileNumberPayload) {\n    this.mobileNumberPayload = verifyMobileNumberPayload;\n    this.store.dispatch(verifyMobileNumber({ payload: verifyMobileNumberPayload }));\n  }\n}\n","<app-sign-up\n  *ngIf=\"this.invitationCode\"\n  (verifyMobileNumber)=\"onVerifyMobileNumber($event)\"\n  [invitationCode]=\"invitationCode\"\n></app-sign-up>\n","import { createAction, props } from \"@ngrx/store\";\nimport { ILoginWithOTPPayload } from \"./../../../../core/interfaces/login-with-otp-payload\";\nimport { IRegisterMobileNumberPayload } from \"./../../../../core/interfaces/register-mobile-number-payload\";\nimport { IVerifyMobileNumberPayload } from \"./../../../../core/interfaces/verify-mobile-number-payload\";\nimport { IVerifyOTPPayload } from \"./../../../../core/interfaces/verify-otp-payload\";\n\nexport const verifyMobileNumber = createAction(\n  \"[AUTH] Verify Mobile Number\",\n  props<{ payload: IVerifyMobileNumberPayload }>()\n);\n\nexport const verifyMobileNumberSuccess = createAction(\"[AUTH] Verify Mobile Number Success\", props<any>());\n\nexport const verifyMobileNumberFailure = createAction(\"[AUTH] Verify Mobile Number Failure\", props<{ error: any }>());\n\nexport const verifyOTP = createAction(\"[AUTH] Verify OTP\", props<{ payload: IVerifyOTPPayload }>());\n\nexport const verifyOTPSuccess = createAction(\"[AUTH] Verify OTP Success\", props<{ data: any }>());\n\nexport const verifyOTPFailure = createAction(\"[AUTH] Verify OTP Failure\", props<{ error: any }>());\n\nexport const verifyInvitation = createAction(\"[AUTH] Verify Invitation\", props<{ payload: any }>());\n\nexport const verifyInvitationSuccess = createAction(\"[AUTH] Verify Invitation Success\", props<{ data: any }>());\n\nexport const verifyInvitationFailure = createAction(\"[AUTH] Verify Invitation Failure\", props<{ error: any }>());\n\nexport const registerMobileNumber = createAction(\n  \"[AUTH] Register Mobile Number\",\n  props<{ payload: IRegisterMobileNumberPayload }>()\n);\n\nexport const registerMobileNumberSuccess = createAction(\"[AUTH] Register Mobile Number Success\", props<any>());\n\nexport const registerMobileNumberFailure = createAction(\n  \"[AUTH] Register Mobile Number Failure\",\n  props<{ error: any }>()\n);\n\nexport const loginWithOTP = createAction(\"[AUTH] Login With OTP\", props<{ payload: ILoginWithOTPPayload }>());\n\nexport const loginWithOTPSuccess = createAction(\"[AUTH] Login With OTP Success\", props<{ data: any }>());\n\nexport const loginWithOTPFailure = createAction(\"[AUTH] Login With OTP Failure\", props<{ error: any }>());\n","import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { AppRoutes } from \"@core/enums\";\nimport { AuthService, SnackBarService } from \"@core/services\";\nimport { Actions, createEffect, Effect, ofType } from \"@ngrx/effects\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { of } from \"rxjs\";\nimport { catchError, exhaustMap, map } from \"rxjs/operators\";\nimport * as AuthActions from \"../actions/auth.actions\";\n\n@Injectable()\nexport class AuthEffects {\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private router: Router,\n    private snackBar: SnackBarService,\n    private translate: TranslateService\n  ) {}\n\n  verifyMobileNumber$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.verifyMobileNumber),\n      exhaustMap((action) =>\n        this.authService.verifyMobileNumber(action.payload).pipe(\n          map((response: any) => AuthActions.verifyMobileNumberSuccess(response)),\n          catchError((error) => of(AuthActions.verifyMobileNumberFailure({ error })))\n        )\n      )\n    );\n  });\n\n  @Effect({ dispatch: false })\n  verifyMobileNumberSuccess = this.actions$.pipe(\n    ofType<any>(AuthActions.verifyMobileNumberSuccess),\n    map((res: any) => {\n      this.snackBar.open(this.translate.instant(\"snackbar_messages.otp_sent\"));\n    })\n  );\n\n  verifyOTP$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.verifyOTP),\n      exhaustMap((action) =>\n        this.authService.verifyOtp(action.payload).pipe(\n          map((response: any) => AuthActions.verifyOTPSuccess(response)),\n          catchError((error) => of(AuthActions.verifyOTPFailure({ error })))\n        )\n      )\n    );\n  });\n\n  @Effect({ dispatch: false })\n  verifyOTPSuccess = this.actions$.pipe(\n    ofType<any>(AuthActions.verifyOTPSuccess),\n    map((res: any) => {\n      this.router.navigateByUrl(AppRoutes.ON_BOARD_OWNER_TYPE);\n      this.snackBar.open(this.translate.instant(\"verify_otp_success\"));\n    })\n  );\n\n  verifyInvitation$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.verifyInvitation),\n      exhaustMap((action) =>\n        this.authService.verifyInvitation(action.payload).pipe(\n          map((response: any) => AuthActions.verifyInvitationSuccess(response)),\n          catchError((error) => of(AuthActions.verifyInvitationFailure({ error })))\n        )\n      )\n    );\n  });\n\n  registerMobileNumber$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.registerMobileNumber),\n      exhaustMap((action) =>\n        this.authService.registerMobileNumber(action.payload).pipe(\n          map((response: any) => AuthActions.registerMobileNumberSuccess(response)),\n          catchError((error) => of(AuthActions.registerMobileNumberFailure({ error })))\n        )\n      )\n    );\n  });\n\n  @Effect({ dispatch: false })\n  registerMobileNumberSuccess = this.actions$.pipe(\n    ofType<any>(AuthActions.registerMobileNumberSuccess),\n    map((res: any) => {\n      this.snackBar.open(this.translate.instant(\"snackbar_messages.otp_sent\"));\n    })\n  );\n\n  loginWithOTP$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.loginWithOTP),\n      exhaustMap((action) =>\n        this.authService.loginWithOtp(action.payload).pipe(\n          map((response: any) => AuthActions.loginWithOTPSuccess(response)),\n          catchError((error) => of(AuthActions.loginWithOTPFailure({ error })))\n        )\n      )\n    );\n  });\n\n  @Effect({ dispatch: false })\n  loginWithOTPSuccess = this.actions$.pipe(\n    ofType<any>(AuthActions.loginWithOTPSuccess),\n    map((res: any) => {\n      this.router.navigateByUrl(AppRoutes.ON_BOARD_OWNER_TYPE);\n      this.snackBar.open(this.translate.instant(\"logged_in_success\"));\n    })\n  );\n}\n","import { createReducer, on } from \"@ngrx/store\";\nimport * as AuthActions from \"../actions/auth.actions\";\n\nexport const authFeatureKey = \"auth\";\n\nexport interface IAuthState {\n  loading: boolean;\n  message: string;\n  error: Error;\n}\n\nexport const initialState: IAuthState = {\n  loading: false,\n  message: \"\",\n  error: null,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n\n  on(AuthActions.verifyMobileNumber, (state) => ({\n    ...state,\n    loading: true,\n  })),\n  on(AuthActions.verifyMobileNumberSuccess, (state, action) => ({\n    ...state,\n    loading: false,\n  })),\n  on(AuthActions.verifyMobileNumberFailure, (state, action) => ({\n    ...state,\n    loading: false,\n  })),\n  on(AuthActions.registerMobileNumberSuccess, (state) => ({\n    ...state,\n    loading: true,\n  })),\n  on(AuthActions.registerMobileNumberSuccess, (state, action) => ({\n    ...state,\n    loading: false,\n  })),\n  on(AuthActions.registerMobileNumberFailure, (state, action) => ({\n    ...state,\n    loading: false,\n    error: action.error.error,\n  }))\n);\n"]}